// Code generated by ent, DO NOT EDIT.

package subject

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subject type in the database.
	Label = "subject"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldSummary holds the string denoting the summary field in the database.
	FieldSummary = "summary"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldNameCn holds the string denoting the name_cn field in the database.
	FieldNameCn = "name_cn"
	// FieldOnHold holds the string denoting the on_hold field in the database.
	FieldOnHold = "on_hold"
	// FieldWish holds the string denoting the wish field in the database.
	FieldWish = "wish"
	// FieldDoing holds the string denoting the doing field in the database.
	FieldDoing = "doing"
	// FieldSubjectType holds the string denoting the subject_type field in the database.
	FieldSubjectType = "subject_type"
	// FieldCollect holds the string denoting the collect field in the database.
	FieldCollect = "collect"
	// FieldDrop holds the string denoting the drop field in the database.
	FieldDrop = "drop"
	// FieldWatched holds the string denoting the watched field in the database.
	FieldWatched = "watched"
	// EdgeCollections holds the string denoting the collections edge name in mutations.
	EdgeCollections = "collections"
	// Table holds the table name of the subject in the database.
	Table = "subjects"
	// CollectionsTable is the table that holds the collections relation/edge.
	CollectionsTable = "collections"
	// CollectionsInverseTable is the table name for the Collection entity.
	// It exists in this package in order to avoid circular dependency with the "collection" package.
	CollectionsInverseTable = "collections"
	// CollectionsColumn is the table column denoting the collections relation/edge.
	CollectionsColumn = "subject_collections"
)

// Columns holds all SQL columns for subject fields.
var Columns = []string{
	FieldID,
	FieldImage,
	FieldSummary,
	FieldName,
	FieldDate,
	FieldNameCn,
	FieldOnHold,
	FieldWish,
	FieldDoing,
	FieldSubjectType,
	FieldCollect,
	FieldDrop,
	FieldWatched,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultImage holds the default value on creation for the "image" field.
	DefaultImage string
	// ImageValidator is a validator for the "image" field. It is called by the builders before save.
	ImageValidator func(string) error
	// SummaryValidator is a validator for the "summary" field. It is called by the builders before save.
	SummaryValidator func(string) error
	// DefaultOnHold holds the default value on creation for the "on_hold" field.
	DefaultOnHold uint32
	// DefaultWish holds the default value on creation for the "wish" field.
	DefaultWish uint32
	// DefaultDoing holds the default value on creation for the "doing" field.
	DefaultDoing uint32
	// DefaultSubjectType holds the default value on creation for the "subject_type" field.
	DefaultSubjectType uint8
	// DefaultCollect holds the default value on creation for the "collect" field.
	DefaultCollect uint32
	// DefaultDrop holds the default value on creation for the "drop" field.
	DefaultDrop uint32
	// DefaultWatched holds the default value on creation for the "watched" field.
	DefaultWatched uint32
)

// OrderOption defines the ordering options for the Subject queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// BySummary orders the results by the summary field.
func BySummary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSummary, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByNameCn orders the results by the name_cn field.
func ByNameCn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameCn, opts...).ToFunc()
}

// ByOnHold orders the results by the on_hold field.
func ByOnHold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnHold, opts...).ToFunc()
}

// ByWish orders the results by the wish field.
func ByWish(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWish, opts...).ToFunc()
}

// ByDoing orders the results by the doing field.
func ByDoing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDoing, opts...).ToFunc()
}

// BySubjectType orders the results by the subject_type field.
func BySubjectType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectType, opts...).ToFunc()
}

// ByCollect orders the results by the collect field.
func ByCollect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollect, opts...).ToFunc()
}

// ByDrop orders the results by the drop field.
func ByDrop(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDrop, opts...).ToFunc()
}

// ByWatched orders the results by the watched field.
func ByWatched(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWatched, opts...).ToFunc()
}

// ByCollectionsCount orders the results by collections count.
func ByCollectionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCollectionsStep(), opts...)
	}
}

// ByCollections orders the results by collections terms.
func ByCollections(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCollectionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCollectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CollectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CollectionsTable, CollectionsColumn),
	)
}
