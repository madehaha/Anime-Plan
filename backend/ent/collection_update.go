// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/collection"
	"backend/ent/members"
	"backend/ent/predicate"
	"backend/ent/subject"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CollectionUpdate is the builder for updating Collection entities.
type CollectionUpdate struct {
	config
	hooks    []Hook
	mutation *CollectionMutation
}

// Where appends a list predicates to the CollectionUpdate builder.
func (cu *CollectionUpdate) Where(ps ...predicate.Collection) *CollectionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetType sets the "type" field.
func (cu *CollectionUpdate) SetType(u uint8) *CollectionUpdate {
	cu.mutation.ResetType()
	cu.mutation.SetType(u)
	return cu
}

// AddType adds u to the "type" field.
func (cu *CollectionUpdate) AddType(u int8) *CollectionUpdate {
	cu.mutation.AddType(u)
	return cu
}

// SetHasComment sets the "has_comment" field.
func (cu *CollectionUpdate) SetHasComment(b bool) *CollectionUpdate {
	cu.mutation.SetHasComment(b)
	return cu
}

// SetNillableHasComment sets the "has_comment" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableHasComment(b *bool) *CollectionUpdate {
	if b != nil {
		cu.SetHasComment(*b)
	}
	return cu
}

// SetComment sets the "comment" field.
func (cu *CollectionUpdate) SetComment(s string) *CollectionUpdate {
	cu.mutation.SetComment(s)
	return cu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableComment(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetComment(*s)
	}
	return cu
}

// SetScore sets the "score" field.
func (cu *CollectionUpdate) SetScore(u uint8) *CollectionUpdate {
	cu.mutation.ResetScore()
	cu.mutation.SetScore(u)
	return cu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableScore(u *uint8) *CollectionUpdate {
	if u != nil {
		cu.SetScore(*u)
	}
	return cu
}

// AddScore adds u to the "score" field.
func (cu *CollectionUpdate) AddScore(u int8) *CollectionUpdate {
	cu.mutation.AddScore(u)
	return cu
}

// SetAddTime sets the "add_time" field.
func (cu *CollectionUpdate) SetAddTime(s string) *CollectionUpdate {
	cu.mutation.SetAddTime(s)
	return cu
}

// SetNillableAddTime sets the "add_time" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableAddTime(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetAddTime(*s)
	}
	return cu
}

// SetEpStatus sets the "ep_status" field.
func (cu *CollectionUpdate) SetEpStatus(u uint8) *CollectionUpdate {
	cu.mutation.ResetEpStatus()
	cu.mutation.SetEpStatus(u)
	return cu
}

// SetNillableEpStatus sets the "ep_status" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableEpStatus(u *uint8) *CollectionUpdate {
	if u != nil {
		cu.SetEpStatus(*u)
	}
	return cu
}

// AddEpStatus adds u to the "ep_status" field.
func (cu *CollectionUpdate) AddEpStatus(u int8) *CollectionUpdate {
	cu.mutation.AddEpStatus(u)
	return cu
}

// SetMemberID sets the "member_id" field.
func (cu *CollectionUpdate) SetMemberID(u uint32) *CollectionUpdate {
	cu.mutation.SetMemberID(u)
	return cu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableMemberID(u *uint32) *CollectionUpdate {
	if u != nil {
		cu.SetMemberID(*u)
	}
	return cu
}

// ClearMemberID clears the value of the "member_id" field.
func (cu *CollectionUpdate) ClearMemberID() *CollectionUpdate {
	cu.mutation.ClearMemberID()
	return cu
}

// SetSubjectID sets the "subject_id" field.
func (cu *CollectionUpdate) SetSubjectID(u uint32) *CollectionUpdate {
	cu.mutation.SetSubjectID(u)
	return cu
}

// SetNillableSubjectID sets the "subject_id" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableSubjectID(u *uint32) *CollectionUpdate {
	if u != nil {
		cu.SetSubjectID(*u)
	}
	return cu
}

// ClearSubjectID clears the value of the "subject_id" field.
func (cu *CollectionUpdate) ClearSubjectID() *CollectionUpdate {
	cu.mutation.ClearSubjectID()
	return cu
}

// SetMember sets the "member" edge to the Members entity.
func (cu *CollectionUpdate) SetMember(m *Members) *CollectionUpdate {
	return cu.SetMemberID(m.ID)
}

// SetSubject sets the "subject" edge to the Subject entity.
func (cu *CollectionUpdate) SetSubject(s *Subject) *CollectionUpdate {
	return cu.SetSubjectID(s.ID)
}

// Mutation returns the CollectionMutation object of the builder.
func (cu *CollectionUpdate) Mutation() *CollectionMutation {
	return cu.mutation
}

// ClearMember clears the "member" edge to the Members entity.
func (cu *CollectionUpdate) ClearMember() *CollectionUpdate {
	cu.mutation.ClearMember()
	return cu
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (cu *CollectionUpdate) ClearSubject() *CollectionUpdate {
	cu.mutation.ClearSubject()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CollectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CollectionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CollectionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CollectionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CollectionUpdate) check() error {
	if v, ok := cu.mutation.GetType(); ok {
		if err := collection.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Collection.type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Comment(); ok {
		if err := collection.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Collection.comment": %w`, err)}
		}
	}
	return nil
}

func (cu *CollectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(collection.Table, collection.Columns, sqlgraph.NewFieldSpec(collection.FieldID, field.TypeUint32))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(collection.FieldType, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.AddedType(); ok {
		_spec.AddField(collection.FieldType, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.HasComment(); ok {
		_spec.SetField(collection.FieldHasComment, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Comment(); ok {
		_spec.SetField(collection.FieldComment, field.TypeString, value)
	}
	if value, ok := cu.mutation.Score(); ok {
		_spec.SetField(collection.FieldScore, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.AddedScore(); ok {
		_spec.AddField(collection.FieldScore, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.AddTime(); ok {
		_spec.SetField(collection.FieldAddTime, field.TypeString, value)
	}
	if value, ok := cu.mutation.EpStatus(); ok {
		_spec.SetField(collection.FieldEpStatus, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.AddedEpStatus(); ok {
		_spec.AddField(collection.FieldEpStatus, field.TypeUint8, value)
	}
	if cu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.MemberTable,
			Columns: []string{collection.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(members.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.MemberTable,
			Columns: []string{collection.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(members.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.SubjectTable,
			Columns: []string{collection.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.SubjectTable,
			Columns: []string{collection.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CollectionUpdateOne is the builder for updating a single Collection entity.
type CollectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CollectionMutation
}

// SetType sets the "type" field.
func (cuo *CollectionUpdateOne) SetType(u uint8) *CollectionUpdateOne {
	cuo.mutation.ResetType()
	cuo.mutation.SetType(u)
	return cuo
}

// AddType adds u to the "type" field.
func (cuo *CollectionUpdateOne) AddType(u int8) *CollectionUpdateOne {
	cuo.mutation.AddType(u)
	return cuo
}

// SetHasComment sets the "has_comment" field.
func (cuo *CollectionUpdateOne) SetHasComment(b bool) *CollectionUpdateOne {
	cuo.mutation.SetHasComment(b)
	return cuo
}

// SetNillableHasComment sets the "has_comment" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableHasComment(b *bool) *CollectionUpdateOne {
	if b != nil {
		cuo.SetHasComment(*b)
	}
	return cuo
}

// SetComment sets the "comment" field.
func (cuo *CollectionUpdateOne) SetComment(s string) *CollectionUpdateOne {
	cuo.mutation.SetComment(s)
	return cuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableComment(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetComment(*s)
	}
	return cuo
}

// SetScore sets the "score" field.
func (cuo *CollectionUpdateOne) SetScore(u uint8) *CollectionUpdateOne {
	cuo.mutation.ResetScore()
	cuo.mutation.SetScore(u)
	return cuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableScore(u *uint8) *CollectionUpdateOne {
	if u != nil {
		cuo.SetScore(*u)
	}
	return cuo
}

// AddScore adds u to the "score" field.
func (cuo *CollectionUpdateOne) AddScore(u int8) *CollectionUpdateOne {
	cuo.mutation.AddScore(u)
	return cuo
}

// SetAddTime sets the "add_time" field.
func (cuo *CollectionUpdateOne) SetAddTime(s string) *CollectionUpdateOne {
	cuo.mutation.SetAddTime(s)
	return cuo
}

// SetNillableAddTime sets the "add_time" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableAddTime(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetAddTime(*s)
	}
	return cuo
}

// SetEpStatus sets the "ep_status" field.
func (cuo *CollectionUpdateOne) SetEpStatus(u uint8) *CollectionUpdateOne {
	cuo.mutation.ResetEpStatus()
	cuo.mutation.SetEpStatus(u)
	return cuo
}

// SetNillableEpStatus sets the "ep_status" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableEpStatus(u *uint8) *CollectionUpdateOne {
	if u != nil {
		cuo.SetEpStatus(*u)
	}
	return cuo
}

// AddEpStatus adds u to the "ep_status" field.
func (cuo *CollectionUpdateOne) AddEpStatus(u int8) *CollectionUpdateOne {
	cuo.mutation.AddEpStatus(u)
	return cuo
}

// SetMemberID sets the "member_id" field.
func (cuo *CollectionUpdateOne) SetMemberID(u uint32) *CollectionUpdateOne {
	cuo.mutation.SetMemberID(u)
	return cuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableMemberID(u *uint32) *CollectionUpdateOne {
	if u != nil {
		cuo.SetMemberID(*u)
	}
	return cuo
}

// ClearMemberID clears the value of the "member_id" field.
func (cuo *CollectionUpdateOne) ClearMemberID() *CollectionUpdateOne {
	cuo.mutation.ClearMemberID()
	return cuo
}

// SetSubjectID sets the "subject_id" field.
func (cuo *CollectionUpdateOne) SetSubjectID(u uint32) *CollectionUpdateOne {
	cuo.mutation.SetSubjectID(u)
	return cuo
}

// SetNillableSubjectID sets the "subject_id" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableSubjectID(u *uint32) *CollectionUpdateOne {
	if u != nil {
		cuo.SetSubjectID(*u)
	}
	return cuo
}

// ClearSubjectID clears the value of the "subject_id" field.
func (cuo *CollectionUpdateOne) ClearSubjectID() *CollectionUpdateOne {
	cuo.mutation.ClearSubjectID()
	return cuo
}

// SetMember sets the "member" edge to the Members entity.
func (cuo *CollectionUpdateOne) SetMember(m *Members) *CollectionUpdateOne {
	return cuo.SetMemberID(m.ID)
}

// SetSubject sets the "subject" edge to the Subject entity.
func (cuo *CollectionUpdateOne) SetSubject(s *Subject) *CollectionUpdateOne {
	return cuo.SetSubjectID(s.ID)
}

// Mutation returns the CollectionMutation object of the builder.
func (cuo *CollectionUpdateOne) Mutation() *CollectionMutation {
	return cuo.mutation
}

// ClearMember clears the "member" edge to the Members entity.
func (cuo *CollectionUpdateOne) ClearMember() *CollectionUpdateOne {
	cuo.mutation.ClearMember()
	return cuo
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (cuo *CollectionUpdateOne) ClearSubject() *CollectionUpdateOne {
	cuo.mutation.ClearSubject()
	return cuo
}

// Where appends a list predicates to the CollectionUpdate builder.
func (cuo *CollectionUpdateOne) Where(ps ...predicate.Collection) *CollectionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CollectionUpdateOne) Select(field string, fields ...string) *CollectionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Collection entity.
func (cuo *CollectionUpdateOne) Save(ctx context.Context) (*Collection, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CollectionUpdateOne) SaveX(ctx context.Context) *Collection {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CollectionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CollectionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CollectionUpdateOne) check() error {
	if v, ok := cuo.mutation.GetType(); ok {
		if err := collection.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Collection.type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Comment(); ok {
		if err := collection.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Collection.comment": %w`, err)}
		}
	}
	return nil
}

func (cuo *CollectionUpdateOne) sqlSave(ctx context.Context) (_node *Collection, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(collection.Table, collection.Columns, sqlgraph.NewFieldSpec(collection.FieldID, field.TypeUint32))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Collection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, collection.FieldID)
		for _, f := range fields {
			if !collection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != collection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(collection.FieldType, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.AddedType(); ok {
		_spec.AddField(collection.FieldType, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.HasComment(); ok {
		_spec.SetField(collection.FieldHasComment, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Comment(); ok {
		_spec.SetField(collection.FieldComment, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Score(); ok {
		_spec.SetField(collection.FieldScore, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.AddedScore(); ok {
		_spec.AddField(collection.FieldScore, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.AddTime(); ok {
		_spec.SetField(collection.FieldAddTime, field.TypeString, value)
	}
	if value, ok := cuo.mutation.EpStatus(); ok {
		_spec.SetField(collection.FieldEpStatus, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.AddedEpStatus(); ok {
		_spec.AddField(collection.FieldEpStatus, field.TypeUint8, value)
	}
	if cuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.MemberTable,
			Columns: []string{collection.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(members.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.MemberTable,
			Columns: []string{collection.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(members.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.SubjectTable,
			Columns: []string{collection.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collection.SubjectTable,
			Columns: []string{collection.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Collection{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
