// Code generated by ent, DO NOT EDIT.

package collection

import (
	"backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldID, id))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v uint32) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldUID, v))
}

// SubID applies equality check predicate on the "sub_id" field. It's identical to SubIDEQ.
func SubID(v int64) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldSubID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldType, v))
}

// IfComment applies equality check predicate on the "if_comment" field. It's identical to IfCommentEQ.
func IfComment(v bool) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldIfComment, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldComment, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int8) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldScore, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v uint32) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v uint32) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...uint32) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...uint32) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldUID, vs...))
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v uint32) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldUID, v))
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v uint32) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldUID, v))
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v uint32) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldUID, v))
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v uint32) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldUID, v))
}

// SubIDEQ applies the EQ predicate on the "sub_id" field.
func SubIDEQ(v int64) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldSubID, v))
}

// SubIDNEQ applies the NEQ predicate on the "sub_id" field.
func SubIDNEQ(v int64) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldSubID, v))
}

// SubIDIn applies the In predicate on the "sub_id" field.
func SubIDIn(vs ...int64) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldSubID, vs...))
}

// SubIDNotIn applies the NotIn predicate on the "sub_id" field.
func SubIDNotIn(vs ...int64) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldSubID, vs...))
}

// SubIDGT applies the GT predicate on the "sub_id" field.
func SubIDGT(v int64) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldSubID, v))
}

// SubIDGTE applies the GTE predicate on the "sub_id" field.
func SubIDGTE(v int64) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldSubID, v))
}

// SubIDLT applies the LT predicate on the "sub_id" field.
func SubIDLT(v int64) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldSubID, v))
}

// SubIDLTE applies the LTE predicate on the "sub_id" field.
func SubIDLTE(v int64) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldSubID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldType, v))
}

// IfCommentEQ applies the EQ predicate on the "if_comment" field.
func IfCommentEQ(v bool) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldIfComment, v))
}

// IfCommentNEQ applies the NEQ predicate on the "if_comment" field.
func IfCommentNEQ(v bool) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldIfComment, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Collection {
	return predicate.Collection(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Collection {
	return predicate.Collection(sql.FieldContainsFold(FieldComment, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int8) predicate.Collection {
	return predicate.Collection(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int8) predicate.Collection {
	return predicate.Collection(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int8) predicate.Collection {
	return predicate.Collection(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int8) predicate.Collection {
	return predicate.Collection(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int8) predicate.Collection {
	return predicate.Collection(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int8) predicate.Collection {
	return predicate.Collection(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int8) predicate.Collection {
	return predicate.Collection(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int8) predicate.Collection {
	return predicate.Collection(sql.FieldLTE(FieldScore, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Collection) predicate.Collection {
	return predicate.Collection(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Collection) predicate.Collection {
	return predicate.Collection(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Collection) predicate.Collection {
	return predicate.Collection(func(s *sql.Selector) {
		p(s.Not())
	})
}
