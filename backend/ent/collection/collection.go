// Code generated by ent, DO NOT EDIT.

package collection

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the collection type in the database.
	Label = "collection"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUID holds the string denoting the uid field in the database.
	FieldUID = "uid"
	// FieldSubID holds the string denoting the sub_id field in the database.
	FieldSubID = "sub_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldIfComment holds the string denoting the if_comment field in the database.
	FieldIfComment = "if_comment"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// Table holds the table name of the collection in the database.
	Table = "collections"
)

// Columns holds all SQL columns for collection fields.
var Columns = []string{
	FieldID,
	FieldUID,
	FieldSubID,
	FieldType,
	FieldIfComment,
	FieldComment,
	FieldScore,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIfComment holds the default value on creation for the "if_comment" field.
	DefaultIfComment bool
	// DefaultComment holds the default value on creation for the "comment" field.
	DefaultComment string
	// CommentValidator is a validator for the "comment" field. It is called by the builders before save.
	CommentValidator func(string) error
	// DefaultScore holds the default value on creation for the "score" field.
	DefaultScore int8
)

// OrderOption defines the ordering options for the Collection queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUID orders the results by the uid field.
func ByUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUID, opts...).ToFunc()
}

// BySubID orders the results by the sub_id field.
func BySubID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByIfComment orders the results by the if_comment field.
func ByIfComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIfComment, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}
