// Code generated by ent, DO NOT EDIT.

package members

import (
	"backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Members {
	return predicate.Members(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Members {
	return predicate.Members(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Members {
	return predicate.Members(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Members {
	return predicate.Members(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Members {
	return predicate.Members(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Members {
	return predicate.Members(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Members {
	return predicate.Members(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Members {
	return predicate.Members(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Members {
	return predicate.Members(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Members {
	return predicate.Members(sql.FieldEQ(FieldUsername, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.Members {
	return predicate.Members(sql.FieldEQ(FieldNickname, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.Members {
	return predicate.Members(sql.FieldEQ(FieldAvatar, v))
}

// Gid applies equality check predicate on the "gid" field. It's identical to GidEQ.
func Gid(v uint8) predicate.Members {
	return predicate.Members(sql.FieldEQ(FieldGid, v))
}

// RegisterTime applies equality check predicate on the "register_time" field. It's identical to RegisterTimeEQ.
func RegisterTime(v time.Time) predicate.Members {
	return predicate.Members(sql.FieldEQ(FieldRegisterTime, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Members {
	return predicate.Members(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Members {
	return predicate.Members(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Members {
	return predicate.Members(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Members {
	return predicate.Members(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Members {
	return predicate.Members(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Members {
	return predicate.Members(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Members {
	return predicate.Members(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Members {
	return predicate.Members(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Members {
	return predicate.Members(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Members {
	return predicate.Members(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Members {
	return predicate.Members(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Members {
	return predicate.Members(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Members {
	return predicate.Members(sql.FieldContainsFold(FieldUsername, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.Members {
	return predicate.Members(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.Members {
	return predicate.Members(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.Members {
	return predicate.Members(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.Members {
	return predicate.Members(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.Members {
	return predicate.Members(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.Members {
	return predicate.Members(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.Members {
	return predicate.Members(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.Members {
	return predicate.Members(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.Members {
	return predicate.Members(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.Members {
	return predicate.Members(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.Members {
	return predicate.Members(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.Members {
	return predicate.Members(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.Members {
	return predicate.Members(sql.FieldContainsFold(FieldNickname, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.Members {
	return predicate.Members(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.Members {
	return predicate.Members(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.Members {
	return predicate.Members(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.Members {
	return predicate.Members(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.Members {
	return predicate.Members(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.Members {
	return predicate.Members(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.Members {
	return predicate.Members(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.Members {
	return predicate.Members(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.Members {
	return predicate.Members(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.Members {
	return predicate.Members(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.Members {
	return predicate.Members(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.Members {
	return predicate.Members(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.Members {
	return predicate.Members(sql.FieldContainsFold(FieldAvatar, v))
}

// GidEQ applies the EQ predicate on the "gid" field.
func GidEQ(v uint8) predicate.Members {
	return predicate.Members(sql.FieldEQ(FieldGid, v))
}

// GidNEQ applies the NEQ predicate on the "gid" field.
func GidNEQ(v uint8) predicate.Members {
	return predicate.Members(sql.FieldNEQ(FieldGid, v))
}

// GidIn applies the In predicate on the "gid" field.
func GidIn(vs ...uint8) predicate.Members {
	return predicate.Members(sql.FieldIn(FieldGid, vs...))
}

// GidNotIn applies the NotIn predicate on the "gid" field.
func GidNotIn(vs ...uint8) predicate.Members {
	return predicate.Members(sql.FieldNotIn(FieldGid, vs...))
}

// GidGT applies the GT predicate on the "gid" field.
func GidGT(v uint8) predicate.Members {
	return predicate.Members(sql.FieldGT(FieldGid, v))
}

// GidGTE applies the GTE predicate on the "gid" field.
func GidGTE(v uint8) predicate.Members {
	return predicate.Members(sql.FieldGTE(FieldGid, v))
}

// GidLT applies the LT predicate on the "gid" field.
func GidLT(v uint8) predicate.Members {
	return predicate.Members(sql.FieldLT(FieldGid, v))
}

// GidLTE applies the LTE predicate on the "gid" field.
func GidLTE(v uint8) predicate.Members {
	return predicate.Members(sql.FieldLTE(FieldGid, v))
}

// RegisterTimeEQ applies the EQ predicate on the "register_time" field.
func RegisterTimeEQ(v time.Time) predicate.Members {
	return predicate.Members(sql.FieldEQ(FieldRegisterTime, v))
}

// RegisterTimeNEQ applies the NEQ predicate on the "register_time" field.
func RegisterTimeNEQ(v time.Time) predicate.Members {
	return predicate.Members(sql.FieldNEQ(FieldRegisterTime, v))
}

// RegisterTimeIn applies the In predicate on the "register_time" field.
func RegisterTimeIn(vs ...time.Time) predicate.Members {
	return predicate.Members(sql.FieldIn(FieldRegisterTime, vs...))
}

// RegisterTimeNotIn applies the NotIn predicate on the "register_time" field.
func RegisterTimeNotIn(vs ...time.Time) predicate.Members {
	return predicate.Members(sql.FieldNotIn(FieldRegisterTime, vs...))
}

// RegisterTimeGT applies the GT predicate on the "register_time" field.
func RegisterTimeGT(v time.Time) predicate.Members {
	return predicate.Members(sql.FieldGT(FieldRegisterTime, v))
}

// RegisterTimeGTE applies the GTE predicate on the "register_time" field.
func RegisterTimeGTE(v time.Time) predicate.Members {
	return predicate.Members(sql.FieldGTE(FieldRegisterTime, v))
}

// RegisterTimeLT applies the LT predicate on the "register_time" field.
func RegisterTimeLT(v time.Time) predicate.Members {
	return predicate.Members(sql.FieldLT(FieldRegisterTime, v))
}

// RegisterTimeLTE applies the LTE predicate on the "register_time" field.
func RegisterTimeLTE(v time.Time) predicate.Members {
	return predicate.Members(sql.FieldLTE(FieldRegisterTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Members) predicate.Members {
	return predicate.Members(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Members) predicate.Members {
	return predicate.Members(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Members) predicate.Members {
	return predicate.Members(func(s *sql.Selector) {
		p(s.Not())
	})
}
