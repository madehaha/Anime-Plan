// Code generated by ent, DO NOT EDIT.

package subjectfield

import (
	"backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldID, id))
}

// Rate1 applies equality check predicate on the "rate_1" field. It's identical to Rate1EQ.
func Rate1(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate1, v))
}

// Rate2 applies equality check predicate on the "rate_2" field. It's identical to Rate2EQ.
func Rate2(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate2, v))
}

// Rate3 applies equality check predicate on the "rate_3" field. It's identical to Rate3EQ.
func Rate3(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate3, v))
}

// Rate4 applies equality check predicate on the "rate_4" field. It's identical to Rate4EQ.
func Rate4(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate4, v))
}

// Rate5 applies equality check predicate on the "rate_5" field. It's identical to Rate5EQ.
func Rate5(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate5, v))
}

// Rate6 applies equality check predicate on the "rate_6" field. It's identical to Rate6EQ.
func Rate6(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate6, v))
}

// Rate7 applies equality check predicate on the "rate_7" field. It's identical to Rate7EQ.
func Rate7(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate7, v))
}

// Rate8 applies equality check predicate on the "rate_8" field. It's identical to Rate8EQ.
func Rate8(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate8, v))
}

// Rate9 applies equality check predicate on the "rate_9" field. It's identical to Rate9EQ.
func Rate9(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate9, v))
}

// Rate10 applies equality check predicate on the "rate_10" field. It's identical to Rate10EQ.
func Rate10(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate10, v))
}

// AverageScore applies equality check predicate on the "average_score" field. It's identical to AverageScoreEQ.
func AverageScore(v float64) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldAverageScore, v))
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRank, v))
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldYear, v))
}

// Month applies equality check predicate on the "month" field. It's identical to MonthEQ.
func Month(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldMonth, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldDate, v))
}

// Weekday applies equality check predicate on the "weekday" field. It's identical to WeekdayEQ.
func Weekday(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldWeekday, v))
}

// Rate1EQ applies the EQ predicate on the "rate_1" field.
func Rate1EQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate1, v))
}

// Rate1NEQ applies the NEQ predicate on the "rate_1" field.
func Rate1NEQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldRate1, v))
}

// Rate1In applies the In predicate on the "rate_1" field.
func Rate1In(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldRate1, vs...))
}

// Rate1NotIn applies the NotIn predicate on the "rate_1" field.
func Rate1NotIn(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldRate1, vs...))
}

// Rate1GT applies the GT predicate on the "rate_1" field.
func Rate1GT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldRate1, v))
}

// Rate1GTE applies the GTE predicate on the "rate_1" field.
func Rate1GTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldRate1, v))
}

// Rate1LT applies the LT predicate on the "rate_1" field.
func Rate1LT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldRate1, v))
}

// Rate1LTE applies the LTE predicate on the "rate_1" field.
func Rate1LTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldRate1, v))
}

// Rate2EQ applies the EQ predicate on the "rate_2" field.
func Rate2EQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate2, v))
}

// Rate2NEQ applies the NEQ predicate on the "rate_2" field.
func Rate2NEQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldRate2, v))
}

// Rate2In applies the In predicate on the "rate_2" field.
func Rate2In(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldRate2, vs...))
}

// Rate2NotIn applies the NotIn predicate on the "rate_2" field.
func Rate2NotIn(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldRate2, vs...))
}

// Rate2GT applies the GT predicate on the "rate_2" field.
func Rate2GT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldRate2, v))
}

// Rate2GTE applies the GTE predicate on the "rate_2" field.
func Rate2GTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldRate2, v))
}

// Rate2LT applies the LT predicate on the "rate_2" field.
func Rate2LT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldRate2, v))
}

// Rate2LTE applies the LTE predicate on the "rate_2" field.
func Rate2LTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldRate2, v))
}

// Rate3EQ applies the EQ predicate on the "rate_3" field.
func Rate3EQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate3, v))
}

// Rate3NEQ applies the NEQ predicate on the "rate_3" field.
func Rate3NEQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldRate3, v))
}

// Rate3In applies the In predicate on the "rate_3" field.
func Rate3In(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldRate3, vs...))
}

// Rate3NotIn applies the NotIn predicate on the "rate_3" field.
func Rate3NotIn(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldRate3, vs...))
}

// Rate3GT applies the GT predicate on the "rate_3" field.
func Rate3GT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldRate3, v))
}

// Rate3GTE applies the GTE predicate on the "rate_3" field.
func Rate3GTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldRate3, v))
}

// Rate3LT applies the LT predicate on the "rate_3" field.
func Rate3LT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldRate3, v))
}

// Rate3LTE applies the LTE predicate on the "rate_3" field.
func Rate3LTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldRate3, v))
}

// Rate4EQ applies the EQ predicate on the "rate_4" field.
func Rate4EQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate4, v))
}

// Rate4NEQ applies the NEQ predicate on the "rate_4" field.
func Rate4NEQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldRate4, v))
}

// Rate4In applies the In predicate on the "rate_4" field.
func Rate4In(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldRate4, vs...))
}

// Rate4NotIn applies the NotIn predicate on the "rate_4" field.
func Rate4NotIn(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldRate4, vs...))
}

// Rate4GT applies the GT predicate on the "rate_4" field.
func Rate4GT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldRate4, v))
}

// Rate4GTE applies the GTE predicate on the "rate_4" field.
func Rate4GTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldRate4, v))
}

// Rate4LT applies the LT predicate on the "rate_4" field.
func Rate4LT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldRate4, v))
}

// Rate4LTE applies the LTE predicate on the "rate_4" field.
func Rate4LTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldRate4, v))
}

// Rate5EQ applies the EQ predicate on the "rate_5" field.
func Rate5EQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate5, v))
}

// Rate5NEQ applies the NEQ predicate on the "rate_5" field.
func Rate5NEQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldRate5, v))
}

// Rate5In applies the In predicate on the "rate_5" field.
func Rate5In(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldRate5, vs...))
}

// Rate5NotIn applies the NotIn predicate on the "rate_5" field.
func Rate5NotIn(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldRate5, vs...))
}

// Rate5GT applies the GT predicate on the "rate_5" field.
func Rate5GT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldRate5, v))
}

// Rate5GTE applies the GTE predicate on the "rate_5" field.
func Rate5GTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldRate5, v))
}

// Rate5LT applies the LT predicate on the "rate_5" field.
func Rate5LT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldRate5, v))
}

// Rate5LTE applies the LTE predicate on the "rate_5" field.
func Rate5LTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldRate5, v))
}

// Rate6EQ applies the EQ predicate on the "rate_6" field.
func Rate6EQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate6, v))
}

// Rate6NEQ applies the NEQ predicate on the "rate_6" field.
func Rate6NEQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldRate6, v))
}

// Rate6In applies the In predicate on the "rate_6" field.
func Rate6In(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldRate6, vs...))
}

// Rate6NotIn applies the NotIn predicate on the "rate_6" field.
func Rate6NotIn(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldRate6, vs...))
}

// Rate6GT applies the GT predicate on the "rate_6" field.
func Rate6GT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldRate6, v))
}

// Rate6GTE applies the GTE predicate on the "rate_6" field.
func Rate6GTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldRate6, v))
}

// Rate6LT applies the LT predicate on the "rate_6" field.
func Rate6LT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldRate6, v))
}

// Rate6LTE applies the LTE predicate on the "rate_6" field.
func Rate6LTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldRate6, v))
}

// Rate7EQ applies the EQ predicate on the "rate_7" field.
func Rate7EQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate7, v))
}

// Rate7NEQ applies the NEQ predicate on the "rate_7" field.
func Rate7NEQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldRate7, v))
}

// Rate7In applies the In predicate on the "rate_7" field.
func Rate7In(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldRate7, vs...))
}

// Rate7NotIn applies the NotIn predicate on the "rate_7" field.
func Rate7NotIn(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldRate7, vs...))
}

// Rate7GT applies the GT predicate on the "rate_7" field.
func Rate7GT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldRate7, v))
}

// Rate7GTE applies the GTE predicate on the "rate_7" field.
func Rate7GTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldRate7, v))
}

// Rate7LT applies the LT predicate on the "rate_7" field.
func Rate7LT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldRate7, v))
}

// Rate7LTE applies the LTE predicate on the "rate_7" field.
func Rate7LTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldRate7, v))
}

// Rate8EQ applies the EQ predicate on the "rate_8" field.
func Rate8EQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate8, v))
}

// Rate8NEQ applies the NEQ predicate on the "rate_8" field.
func Rate8NEQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldRate8, v))
}

// Rate8In applies the In predicate on the "rate_8" field.
func Rate8In(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldRate8, vs...))
}

// Rate8NotIn applies the NotIn predicate on the "rate_8" field.
func Rate8NotIn(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldRate8, vs...))
}

// Rate8GT applies the GT predicate on the "rate_8" field.
func Rate8GT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldRate8, v))
}

// Rate8GTE applies the GTE predicate on the "rate_8" field.
func Rate8GTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldRate8, v))
}

// Rate8LT applies the LT predicate on the "rate_8" field.
func Rate8LT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldRate8, v))
}

// Rate8LTE applies the LTE predicate on the "rate_8" field.
func Rate8LTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldRate8, v))
}

// Rate9EQ applies the EQ predicate on the "rate_9" field.
func Rate9EQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate9, v))
}

// Rate9NEQ applies the NEQ predicate on the "rate_9" field.
func Rate9NEQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldRate9, v))
}

// Rate9In applies the In predicate on the "rate_9" field.
func Rate9In(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldRate9, vs...))
}

// Rate9NotIn applies the NotIn predicate on the "rate_9" field.
func Rate9NotIn(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldRate9, vs...))
}

// Rate9GT applies the GT predicate on the "rate_9" field.
func Rate9GT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldRate9, v))
}

// Rate9GTE applies the GTE predicate on the "rate_9" field.
func Rate9GTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldRate9, v))
}

// Rate9LT applies the LT predicate on the "rate_9" field.
func Rate9LT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldRate9, v))
}

// Rate9LTE applies the LTE predicate on the "rate_9" field.
func Rate9LTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldRate9, v))
}

// Rate10EQ applies the EQ predicate on the "rate_10" field.
func Rate10EQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRate10, v))
}

// Rate10NEQ applies the NEQ predicate on the "rate_10" field.
func Rate10NEQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldRate10, v))
}

// Rate10In applies the In predicate on the "rate_10" field.
func Rate10In(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldRate10, vs...))
}

// Rate10NotIn applies the NotIn predicate on the "rate_10" field.
func Rate10NotIn(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldRate10, vs...))
}

// Rate10GT applies the GT predicate on the "rate_10" field.
func Rate10GT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldRate10, v))
}

// Rate10GTE applies the GTE predicate on the "rate_10" field.
func Rate10GTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldRate10, v))
}

// Rate10LT applies the LT predicate on the "rate_10" field.
func Rate10LT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldRate10, v))
}

// Rate10LTE applies the LTE predicate on the "rate_10" field.
func Rate10LTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldRate10, v))
}

// AverageScoreEQ applies the EQ predicate on the "average_score" field.
func AverageScoreEQ(v float64) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldAverageScore, v))
}

// AverageScoreNEQ applies the NEQ predicate on the "average_score" field.
func AverageScoreNEQ(v float64) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldAverageScore, v))
}

// AverageScoreIn applies the In predicate on the "average_score" field.
func AverageScoreIn(vs ...float64) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldAverageScore, vs...))
}

// AverageScoreNotIn applies the NotIn predicate on the "average_score" field.
func AverageScoreNotIn(vs ...float64) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldAverageScore, vs...))
}

// AverageScoreGT applies the GT predicate on the "average_score" field.
func AverageScoreGT(v float64) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldAverageScore, v))
}

// AverageScoreGTE applies the GTE predicate on the "average_score" field.
func AverageScoreGTE(v float64) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldAverageScore, v))
}

// AverageScoreLT applies the LT predicate on the "average_score" field.
func AverageScoreLT(v float64) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldAverageScore, v))
}

// AverageScoreLTE applies the LTE predicate on the "average_score" field.
func AverageScoreLTE(v float64) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldAverageScore, v))
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldRank, v))
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldRank, v))
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldRank, vs...))
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldRank, vs...))
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldRank, v))
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldRank, v))
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldRank, v))
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldRank, v))
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldYear, v))
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldYear, v))
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldYear, vs...))
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldYear, vs...))
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldYear, v))
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldYear, v))
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldYear, v))
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v uint32) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldYear, v))
}

// MonthEQ applies the EQ predicate on the "month" field.
func MonthEQ(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldMonth, v))
}

// MonthNEQ applies the NEQ predicate on the "month" field.
func MonthNEQ(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldMonth, v))
}

// MonthIn applies the In predicate on the "month" field.
func MonthIn(vs ...uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldMonth, vs...))
}

// MonthNotIn applies the NotIn predicate on the "month" field.
func MonthNotIn(vs ...uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldMonth, vs...))
}

// MonthGT applies the GT predicate on the "month" field.
func MonthGT(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldMonth, v))
}

// MonthGTE applies the GTE predicate on the "month" field.
func MonthGTE(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldMonth, v))
}

// MonthLT applies the LT predicate on the "month" field.
func MonthLT(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldMonth, v))
}

// MonthLTE applies the LTE predicate on the "month" field.
func MonthLTE(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldMonth, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldDate, v))
}

// WeekdayEQ applies the EQ predicate on the "weekday" field.
func WeekdayEQ(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldEQ(FieldWeekday, v))
}

// WeekdayNEQ applies the NEQ predicate on the "weekday" field.
func WeekdayNEQ(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNEQ(FieldWeekday, v))
}

// WeekdayIn applies the In predicate on the "weekday" field.
func WeekdayIn(vs ...uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldIn(FieldWeekday, vs...))
}

// WeekdayNotIn applies the NotIn predicate on the "weekday" field.
func WeekdayNotIn(vs ...uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldNotIn(FieldWeekday, vs...))
}

// WeekdayGT applies the GT predicate on the "weekday" field.
func WeekdayGT(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGT(FieldWeekday, v))
}

// WeekdayGTE applies the GTE predicate on the "weekday" field.
func WeekdayGTE(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldGTE(FieldWeekday, v))
}

// WeekdayLT applies the LT predicate on the "weekday" field.
func WeekdayLT(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLT(FieldWeekday, v))
}

// WeekdayLTE applies the LTE predicate on the "weekday" field.
func WeekdayLTE(v uint8) predicate.SubjectField {
	return predicate.SubjectField(sql.FieldLTE(FieldWeekday, v))
}

// HasSubject applies the HasEdge predicate on the "subject" edge.
func HasSubject() predicate.SubjectField {
	return predicate.SubjectField(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SubjectTable, SubjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjectWith applies the HasEdge predicate on the "subject" edge with a given conditions (other predicates).
func HasSubjectWith(preds ...predicate.Subject) predicate.SubjectField {
	return predicate.SubjectField(func(s *sql.Selector) {
		step := newSubjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubjectField) predicate.SubjectField {
	return predicate.SubjectField(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubjectField) predicate.SubjectField {
	return predicate.SubjectField(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubjectField) predicate.SubjectField {
	return predicate.SubjectField(func(s *sql.Selector) {
		p(s.Not())
	})
}
