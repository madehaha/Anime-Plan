// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/subject"
	"backend/ent/subjectfield"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubjectFieldCreate is the builder for creating a SubjectField entity.
type SubjectFieldCreate struct {
	config
	mutation *SubjectFieldMutation
	hooks    []Hook
}

// SetRate1 sets the "rate_1" field.
func (sfc *SubjectFieldCreate) SetRate1(u uint32) *SubjectFieldCreate {
	sfc.mutation.SetRate1(u)
	return sfc
}

// SetNillableRate1 sets the "rate_1" field if the given value is not nil.
func (sfc *SubjectFieldCreate) SetNillableRate1(u *uint32) *SubjectFieldCreate {
	if u != nil {
		sfc.SetRate1(*u)
	}
	return sfc
}

// SetRate2 sets the "rate_2" field.
func (sfc *SubjectFieldCreate) SetRate2(u uint32) *SubjectFieldCreate {
	sfc.mutation.SetRate2(u)
	return sfc
}

// SetNillableRate2 sets the "rate_2" field if the given value is not nil.
func (sfc *SubjectFieldCreate) SetNillableRate2(u *uint32) *SubjectFieldCreate {
	if u != nil {
		sfc.SetRate2(*u)
	}
	return sfc
}

// SetRate3 sets the "rate_3" field.
func (sfc *SubjectFieldCreate) SetRate3(u uint32) *SubjectFieldCreate {
	sfc.mutation.SetRate3(u)
	return sfc
}

// SetNillableRate3 sets the "rate_3" field if the given value is not nil.
func (sfc *SubjectFieldCreate) SetNillableRate3(u *uint32) *SubjectFieldCreate {
	if u != nil {
		sfc.SetRate3(*u)
	}
	return sfc
}

// SetRate4 sets the "rate_4" field.
func (sfc *SubjectFieldCreate) SetRate4(u uint32) *SubjectFieldCreate {
	sfc.mutation.SetRate4(u)
	return sfc
}

// SetNillableRate4 sets the "rate_4" field if the given value is not nil.
func (sfc *SubjectFieldCreate) SetNillableRate4(u *uint32) *SubjectFieldCreate {
	if u != nil {
		sfc.SetRate4(*u)
	}
	return sfc
}

// SetRate5 sets the "rate_5" field.
func (sfc *SubjectFieldCreate) SetRate5(u uint32) *SubjectFieldCreate {
	sfc.mutation.SetRate5(u)
	return sfc
}

// SetNillableRate5 sets the "rate_5" field if the given value is not nil.
func (sfc *SubjectFieldCreate) SetNillableRate5(u *uint32) *SubjectFieldCreate {
	if u != nil {
		sfc.SetRate5(*u)
	}
	return sfc
}

// SetRate6 sets the "rate_6" field.
func (sfc *SubjectFieldCreate) SetRate6(u uint32) *SubjectFieldCreate {
	sfc.mutation.SetRate6(u)
	return sfc
}

// SetNillableRate6 sets the "rate_6" field if the given value is not nil.
func (sfc *SubjectFieldCreate) SetNillableRate6(u *uint32) *SubjectFieldCreate {
	if u != nil {
		sfc.SetRate6(*u)
	}
	return sfc
}

// SetRate7 sets the "rate_7" field.
func (sfc *SubjectFieldCreate) SetRate7(u uint32) *SubjectFieldCreate {
	sfc.mutation.SetRate7(u)
	return sfc
}

// SetNillableRate7 sets the "rate_7" field if the given value is not nil.
func (sfc *SubjectFieldCreate) SetNillableRate7(u *uint32) *SubjectFieldCreate {
	if u != nil {
		sfc.SetRate7(*u)
	}
	return sfc
}

// SetRate8 sets the "rate_8" field.
func (sfc *SubjectFieldCreate) SetRate8(u uint32) *SubjectFieldCreate {
	sfc.mutation.SetRate8(u)
	return sfc
}

// SetNillableRate8 sets the "rate_8" field if the given value is not nil.
func (sfc *SubjectFieldCreate) SetNillableRate8(u *uint32) *SubjectFieldCreate {
	if u != nil {
		sfc.SetRate8(*u)
	}
	return sfc
}

// SetRate9 sets the "rate_9" field.
func (sfc *SubjectFieldCreate) SetRate9(u uint32) *SubjectFieldCreate {
	sfc.mutation.SetRate9(u)
	return sfc
}

// SetNillableRate9 sets the "rate_9" field if the given value is not nil.
func (sfc *SubjectFieldCreate) SetNillableRate9(u *uint32) *SubjectFieldCreate {
	if u != nil {
		sfc.SetRate9(*u)
	}
	return sfc
}

// SetRate10 sets the "rate_10" field.
func (sfc *SubjectFieldCreate) SetRate10(u uint32) *SubjectFieldCreate {
	sfc.mutation.SetRate10(u)
	return sfc
}

// SetNillableRate10 sets the "rate_10" field if the given value is not nil.
func (sfc *SubjectFieldCreate) SetNillableRate10(u *uint32) *SubjectFieldCreate {
	if u != nil {
		sfc.SetRate10(*u)
	}
	return sfc
}

// SetAverageScore sets the "average_score" field.
func (sfc *SubjectFieldCreate) SetAverageScore(f float64) *SubjectFieldCreate {
	sfc.mutation.SetAverageScore(f)
	return sfc
}

// SetNillableAverageScore sets the "average_score" field if the given value is not nil.
func (sfc *SubjectFieldCreate) SetNillableAverageScore(f *float64) *SubjectFieldCreate {
	if f != nil {
		sfc.SetAverageScore(*f)
	}
	return sfc
}

// SetRank sets the "rank" field.
func (sfc *SubjectFieldCreate) SetRank(u uint32) *SubjectFieldCreate {
	sfc.mutation.SetRank(u)
	return sfc
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (sfc *SubjectFieldCreate) SetNillableRank(u *uint32) *SubjectFieldCreate {
	if u != nil {
		sfc.SetRank(*u)
	}
	return sfc
}

// SetYear sets the "year" field.
func (sfc *SubjectFieldCreate) SetYear(u uint32) *SubjectFieldCreate {
	sfc.mutation.SetYear(u)
	return sfc
}

// SetMonth sets the "month" field.
func (sfc *SubjectFieldCreate) SetMonth(u uint8) *SubjectFieldCreate {
	sfc.mutation.SetMonth(u)
	return sfc
}

// SetDate sets the "date" field.
func (sfc *SubjectFieldCreate) SetDate(u uint8) *SubjectFieldCreate {
	sfc.mutation.SetDate(u)
	return sfc
}

// SetWeekday sets the "weekday" field.
func (sfc *SubjectFieldCreate) SetWeekday(u uint8) *SubjectFieldCreate {
	sfc.mutation.SetWeekday(u)
	return sfc
}

// SetSubjectID sets the "subject" edge to the Subject entity by ID.
func (sfc *SubjectFieldCreate) SetSubjectID(id uint32) *SubjectFieldCreate {
	sfc.mutation.SetSubjectID(id)
	return sfc
}

// SetNillableSubjectID sets the "subject" edge to the Subject entity by ID if the given value is not nil.
func (sfc *SubjectFieldCreate) SetNillableSubjectID(id *uint32) *SubjectFieldCreate {
	if id != nil {
		sfc = sfc.SetSubjectID(*id)
	}
	return sfc
}

// SetSubject sets the "subject" edge to the Subject entity.
func (sfc *SubjectFieldCreate) SetSubject(s *Subject) *SubjectFieldCreate {
	return sfc.SetSubjectID(s.ID)
}

// Mutation returns the SubjectFieldMutation object of the builder.
func (sfc *SubjectFieldCreate) Mutation() *SubjectFieldMutation {
	return sfc.mutation
}

// Save creates the SubjectField in the database.
func (sfc *SubjectFieldCreate) Save(ctx context.Context) (*SubjectField, error) {
	sfc.defaults()
	return withHooks(ctx, sfc.sqlSave, sfc.mutation, sfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sfc *SubjectFieldCreate) SaveX(ctx context.Context) *SubjectField {
	v, err := sfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfc *SubjectFieldCreate) Exec(ctx context.Context) error {
	_, err := sfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfc *SubjectFieldCreate) ExecX(ctx context.Context) {
	if err := sfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sfc *SubjectFieldCreate) defaults() {
	if _, ok := sfc.mutation.Rate1(); !ok {
		v := subjectfield.DefaultRate1
		sfc.mutation.SetRate1(v)
	}
	if _, ok := sfc.mutation.Rate2(); !ok {
		v := subjectfield.DefaultRate2
		sfc.mutation.SetRate2(v)
	}
	if _, ok := sfc.mutation.Rate3(); !ok {
		v := subjectfield.DefaultRate3
		sfc.mutation.SetRate3(v)
	}
	if _, ok := sfc.mutation.Rate4(); !ok {
		v := subjectfield.DefaultRate4
		sfc.mutation.SetRate4(v)
	}
	if _, ok := sfc.mutation.Rate5(); !ok {
		v := subjectfield.DefaultRate5
		sfc.mutation.SetRate5(v)
	}
	if _, ok := sfc.mutation.Rate6(); !ok {
		v := subjectfield.DefaultRate6
		sfc.mutation.SetRate6(v)
	}
	if _, ok := sfc.mutation.Rate7(); !ok {
		v := subjectfield.DefaultRate7
		sfc.mutation.SetRate7(v)
	}
	if _, ok := sfc.mutation.Rate8(); !ok {
		v := subjectfield.DefaultRate8
		sfc.mutation.SetRate8(v)
	}
	if _, ok := sfc.mutation.Rate9(); !ok {
		v := subjectfield.DefaultRate9
		sfc.mutation.SetRate9(v)
	}
	if _, ok := sfc.mutation.Rate10(); !ok {
		v := subjectfield.DefaultRate10
		sfc.mutation.SetRate10(v)
	}
	if _, ok := sfc.mutation.AverageScore(); !ok {
		v := subjectfield.DefaultAverageScore
		sfc.mutation.SetAverageScore(v)
	}
	if _, ok := sfc.mutation.Rank(); !ok {
		v := subjectfield.DefaultRank
		sfc.mutation.SetRank(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfc *SubjectFieldCreate) check() error {
	if _, ok := sfc.mutation.Rate1(); !ok {
		return &ValidationError{Name: "rate_1", err: errors.New(`ent: missing required field "SubjectField.rate_1"`)}
	}
	if _, ok := sfc.mutation.Rate2(); !ok {
		return &ValidationError{Name: "rate_2", err: errors.New(`ent: missing required field "SubjectField.rate_2"`)}
	}
	if _, ok := sfc.mutation.Rate3(); !ok {
		return &ValidationError{Name: "rate_3", err: errors.New(`ent: missing required field "SubjectField.rate_3"`)}
	}
	if _, ok := sfc.mutation.Rate4(); !ok {
		return &ValidationError{Name: "rate_4", err: errors.New(`ent: missing required field "SubjectField.rate_4"`)}
	}
	if _, ok := sfc.mutation.Rate5(); !ok {
		return &ValidationError{Name: "rate_5", err: errors.New(`ent: missing required field "SubjectField.rate_5"`)}
	}
	if _, ok := sfc.mutation.Rate6(); !ok {
		return &ValidationError{Name: "rate_6", err: errors.New(`ent: missing required field "SubjectField.rate_6"`)}
	}
	if _, ok := sfc.mutation.Rate7(); !ok {
		return &ValidationError{Name: "rate_7", err: errors.New(`ent: missing required field "SubjectField.rate_7"`)}
	}
	if _, ok := sfc.mutation.Rate8(); !ok {
		return &ValidationError{Name: "rate_8", err: errors.New(`ent: missing required field "SubjectField.rate_8"`)}
	}
	if _, ok := sfc.mutation.Rate9(); !ok {
		return &ValidationError{Name: "rate_9", err: errors.New(`ent: missing required field "SubjectField.rate_9"`)}
	}
	if _, ok := sfc.mutation.Rate10(); !ok {
		return &ValidationError{Name: "rate_10", err: errors.New(`ent: missing required field "SubjectField.rate_10"`)}
	}
	if _, ok := sfc.mutation.AverageScore(); !ok {
		return &ValidationError{Name: "average_score", err: errors.New(`ent: missing required field "SubjectField.average_score"`)}
	}
	if v, ok := sfc.mutation.AverageScore(); ok {
		if err := subjectfield.AverageScoreValidator(v); err != nil {
			return &ValidationError{Name: "average_score", err: fmt.Errorf(`ent: validator failed for field "SubjectField.average_score": %w`, err)}
		}
	}
	if _, ok := sfc.mutation.Rank(); !ok {
		return &ValidationError{Name: "rank", err: errors.New(`ent: missing required field "SubjectField.rank"`)}
	}
	if _, ok := sfc.mutation.Year(); !ok {
		return &ValidationError{Name: "year", err: errors.New(`ent: missing required field "SubjectField.year"`)}
	}
	if _, ok := sfc.mutation.Month(); !ok {
		return &ValidationError{Name: "month", err: errors.New(`ent: missing required field "SubjectField.month"`)}
	}
	if v, ok := sfc.mutation.Month(); ok {
		if err := subjectfield.MonthValidator(v); err != nil {
			return &ValidationError{Name: "month", err: fmt.Errorf(`ent: validator failed for field "SubjectField.month": %w`, err)}
		}
	}
	if _, ok := sfc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "SubjectField.date"`)}
	}
	if v, ok := sfc.mutation.Date(); ok {
		if err := subjectfield.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`ent: validator failed for field "SubjectField.date": %w`, err)}
		}
	}
	if _, ok := sfc.mutation.Weekday(); !ok {
		return &ValidationError{Name: "weekday", err: errors.New(`ent: missing required field "SubjectField.weekday"`)}
	}
	if v, ok := sfc.mutation.Weekday(); ok {
		if err := subjectfield.WeekdayValidator(v); err != nil {
			return &ValidationError{Name: "weekday", err: fmt.Errorf(`ent: validator failed for field "SubjectField.weekday": %w`, err)}
		}
	}
	return nil
}

func (sfc *SubjectFieldCreate) sqlSave(ctx context.Context) (*SubjectField, error) {
	if err := sfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sfc.mutation.id = &_node.ID
	sfc.mutation.done = true
	return _node, nil
}

func (sfc *SubjectFieldCreate) createSpec() (*SubjectField, *sqlgraph.CreateSpec) {
	var (
		_node = &SubjectField{config: sfc.config}
		_spec = sqlgraph.NewCreateSpec(subjectfield.Table, sqlgraph.NewFieldSpec(subjectfield.FieldID, field.TypeInt))
	)
	if value, ok := sfc.mutation.Rate1(); ok {
		_spec.SetField(subjectfield.FieldRate1, field.TypeUint32, value)
		_node.Rate1 = value
	}
	if value, ok := sfc.mutation.Rate2(); ok {
		_spec.SetField(subjectfield.FieldRate2, field.TypeUint32, value)
		_node.Rate2 = value
	}
	if value, ok := sfc.mutation.Rate3(); ok {
		_spec.SetField(subjectfield.FieldRate3, field.TypeUint32, value)
		_node.Rate3 = value
	}
	if value, ok := sfc.mutation.Rate4(); ok {
		_spec.SetField(subjectfield.FieldRate4, field.TypeUint32, value)
		_node.Rate4 = value
	}
	if value, ok := sfc.mutation.Rate5(); ok {
		_spec.SetField(subjectfield.FieldRate5, field.TypeUint32, value)
		_node.Rate5 = value
	}
	if value, ok := sfc.mutation.Rate6(); ok {
		_spec.SetField(subjectfield.FieldRate6, field.TypeUint32, value)
		_node.Rate6 = value
	}
	if value, ok := sfc.mutation.Rate7(); ok {
		_spec.SetField(subjectfield.FieldRate7, field.TypeUint32, value)
		_node.Rate7 = value
	}
	if value, ok := sfc.mutation.Rate8(); ok {
		_spec.SetField(subjectfield.FieldRate8, field.TypeUint32, value)
		_node.Rate8 = value
	}
	if value, ok := sfc.mutation.Rate9(); ok {
		_spec.SetField(subjectfield.FieldRate9, field.TypeUint32, value)
		_node.Rate9 = value
	}
	if value, ok := sfc.mutation.Rate10(); ok {
		_spec.SetField(subjectfield.FieldRate10, field.TypeUint32, value)
		_node.Rate10 = value
	}
	if value, ok := sfc.mutation.AverageScore(); ok {
		_spec.SetField(subjectfield.FieldAverageScore, field.TypeFloat64, value)
		_node.AverageScore = value
	}
	if value, ok := sfc.mutation.Rank(); ok {
		_spec.SetField(subjectfield.FieldRank, field.TypeUint32, value)
		_node.Rank = value
	}
	if value, ok := sfc.mutation.Year(); ok {
		_spec.SetField(subjectfield.FieldYear, field.TypeUint32, value)
		_node.Year = value
	}
	if value, ok := sfc.mutation.Month(); ok {
		_spec.SetField(subjectfield.FieldMonth, field.TypeUint8, value)
		_node.Month = value
	}
	if value, ok := sfc.mutation.Date(); ok {
		_spec.SetField(subjectfield.FieldDate, field.TypeUint8, value)
		_node.Date = value
	}
	if value, ok := sfc.mutation.Weekday(); ok {
		_spec.SetField(subjectfield.FieldWeekday, field.TypeUint8, value)
		_node.Weekday = value
	}
	if nodes := sfc.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subjectfield.SubjectTable,
			Columns: []string{subjectfield.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.subject_subject_field = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubjectFieldCreateBulk is the builder for creating many SubjectField entities in bulk.
type SubjectFieldCreateBulk struct {
	config
	builders []*SubjectFieldCreate
}

// Save creates the SubjectField entities in the database.
func (sfcb *SubjectFieldCreateBulk) Save(ctx context.Context) ([]*SubjectField, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sfcb.builders))
	nodes := make([]*SubjectField, len(sfcb.builders))
	mutators := make([]Mutator, len(sfcb.builders))
	for i := range sfcb.builders {
		func(i int, root context.Context) {
			builder := sfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubjectFieldMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sfcb *SubjectFieldCreateBulk) SaveX(ctx context.Context) []*SubjectField {
	v, err := sfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfcb *SubjectFieldCreateBulk) Exec(ctx context.Context) error {
	_, err := sfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfcb *SubjectFieldCreateBulk) ExecX(ctx context.Context) {
	if err := sfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
