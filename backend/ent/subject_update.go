// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/collection"
	"backend/ent/predicate"
	"backend/ent/subject"
	"backend/ent/subjectfield"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubjectUpdate is the builder for updating Subject entities.
type SubjectUpdate struct {
	config
	hooks    []Hook
	mutation *SubjectMutation
}

// Where appends a list predicates to the SubjectUpdate builder.
func (su *SubjectUpdate) Where(ps ...predicate.Subject) *SubjectUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetImage sets the "image" field.
func (su *SubjectUpdate) SetImage(s string) *SubjectUpdate {
	su.mutation.SetImage(s)
	return su
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableImage(s *string) *SubjectUpdate {
	if s != nil {
		su.SetImage(*s)
	}
	return su
}

// SetSummary sets the "summary" field.
func (su *SubjectUpdate) SetSummary(s string) *SubjectUpdate {
	su.mutation.SetSummary(s)
	return su
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableSummary(s *string) *SubjectUpdate {
	if s != nil {
		su.SetSummary(*s)
	}
	return su
}

// SetName sets the "name" field.
func (su *SubjectUpdate) SetName(s string) *SubjectUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNameCn sets the "name_cn" field.
func (su *SubjectUpdate) SetNameCn(s string) *SubjectUpdate {
	su.mutation.SetNameCn(s)
	return su
}

// SetEpisodes sets the "episodes" field.
func (su *SubjectUpdate) SetEpisodes(u uint8) *SubjectUpdate {
	su.mutation.ResetEpisodes()
	su.mutation.SetEpisodes(u)
	return su
}

// AddEpisodes adds u to the "episodes" field.
func (su *SubjectUpdate) AddEpisodes(u int8) *SubjectUpdate {
	su.mutation.AddEpisodes(u)
	return su
}

// SetWish sets the "wish" field.
func (su *SubjectUpdate) SetWish(u uint32) *SubjectUpdate {
	su.mutation.ResetWish()
	su.mutation.SetWish(u)
	return su
}

// SetNillableWish sets the "wish" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableWish(u *uint32) *SubjectUpdate {
	if u != nil {
		su.SetWish(*u)
	}
	return su
}

// AddWish adds u to the "wish" field.
func (su *SubjectUpdate) AddWish(u int32) *SubjectUpdate {
	su.mutation.AddWish(u)
	return su
}

// SetDoing sets the "doing" field.
func (su *SubjectUpdate) SetDoing(u uint32) *SubjectUpdate {
	su.mutation.ResetDoing()
	su.mutation.SetDoing(u)
	return su
}

// SetNillableDoing sets the "doing" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableDoing(u *uint32) *SubjectUpdate {
	if u != nil {
		su.SetDoing(*u)
	}
	return su
}

// AddDoing adds u to the "doing" field.
func (su *SubjectUpdate) AddDoing(u int32) *SubjectUpdate {
	su.mutation.AddDoing(u)
	return su
}

// SetWatched sets the "watched" field.
func (su *SubjectUpdate) SetWatched(u uint32) *SubjectUpdate {
	su.mutation.ResetWatched()
	su.mutation.SetWatched(u)
	return su
}

// SetNillableWatched sets the "watched" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableWatched(u *uint32) *SubjectUpdate {
	if u != nil {
		su.SetWatched(*u)
	}
	return su
}

// AddWatched adds u to the "watched" field.
func (su *SubjectUpdate) AddWatched(u int32) *SubjectUpdate {
	su.mutation.AddWatched(u)
	return su
}

// SetOnHold sets the "on_hold" field.
func (su *SubjectUpdate) SetOnHold(u uint32) *SubjectUpdate {
	su.mutation.ResetOnHold()
	su.mutation.SetOnHold(u)
	return su
}

// SetNillableOnHold sets the "on_hold" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableOnHold(u *uint32) *SubjectUpdate {
	if u != nil {
		su.SetOnHold(*u)
	}
	return su
}

// AddOnHold adds u to the "on_hold" field.
func (su *SubjectUpdate) AddOnHold(u int32) *SubjectUpdate {
	su.mutation.AddOnHold(u)
	return su
}

// SetDropped sets the "dropped" field.
func (su *SubjectUpdate) SetDropped(u uint32) *SubjectUpdate {
	su.mutation.ResetDropped()
	su.mutation.SetDropped(u)
	return su
}

// SetNillableDropped sets the "dropped" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableDropped(u *uint32) *SubjectUpdate {
	if u != nil {
		su.SetDropped(*u)
	}
	return su
}

// AddDropped adds u to the "dropped" field.
func (su *SubjectUpdate) AddDropped(u int32) *SubjectUpdate {
	su.mutation.AddDropped(u)
	return su
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by IDs.
func (su *SubjectUpdate) AddCollectionIDs(ids ...uint32) *SubjectUpdate {
	su.mutation.AddCollectionIDs(ids...)
	return su
}

// AddCollections adds the "collections" edges to the Collection entity.
func (su *SubjectUpdate) AddCollections(c ...*Collection) *SubjectUpdate {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCollectionIDs(ids...)
}

// SetSubjectFieldID sets the "subject_field" edge to the SubjectField entity by ID.
func (su *SubjectUpdate) SetSubjectFieldID(id int) *SubjectUpdate {
	su.mutation.SetSubjectFieldID(id)
	return su
}

// SetNillableSubjectFieldID sets the "subject_field" edge to the SubjectField entity by ID if the given value is not nil.
func (su *SubjectUpdate) SetNillableSubjectFieldID(id *int) *SubjectUpdate {
	if id != nil {
		su = su.SetSubjectFieldID(*id)
	}
	return su
}

// SetSubjectField sets the "subject_field" edge to the SubjectField entity.
func (su *SubjectUpdate) SetSubjectField(s *SubjectField) *SubjectUpdate {
	return su.SetSubjectFieldID(s.ID)
}

// Mutation returns the SubjectMutation object of the builder.
func (su *SubjectUpdate) Mutation() *SubjectMutation {
	return su.mutation
}

// ClearCollections clears all "collections" edges to the Collection entity.
func (su *SubjectUpdate) ClearCollections() *SubjectUpdate {
	su.mutation.ClearCollections()
	return su
}

// RemoveCollectionIDs removes the "collections" edge to Collection entities by IDs.
func (su *SubjectUpdate) RemoveCollectionIDs(ids ...uint32) *SubjectUpdate {
	su.mutation.RemoveCollectionIDs(ids...)
	return su
}

// RemoveCollections removes "collections" edges to Collection entities.
func (su *SubjectUpdate) RemoveCollections(c ...*Collection) *SubjectUpdate {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCollectionIDs(ids...)
}

// ClearSubjectField clears the "subject_field" edge to the SubjectField entity.
func (su *SubjectUpdate) ClearSubjectField() *SubjectUpdate {
	su.mutation.ClearSubjectField()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubjectUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubjectUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubjectUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubjectUpdate) check() error {
	if v, ok := su.mutation.Image(); ok {
		if err := subject.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Subject.image": %w`, err)}
		}
	}
	if v, ok := su.mutation.Summary(); ok {
		if err := subject.SummaryValidator(v); err != nil {
			return &ValidationError{Name: "summary", err: fmt.Errorf(`ent: validator failed for field "Subject.summary": %w`, err)}
		}
	}
	return nil
}

func (su *SubjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subject.Table, subject.Columns, sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUint32))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Image(); ok {
		_spec.SetField(subject.FieldImage, field.TypeString, value)
	}
	if value, ok := su.mutation.Summary(); ok {
		_spec.SetField(subject.FieldSummary, field.TypeString, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(subject.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.NameCn(); ok {
		_spec.SetField(subject.FieldNameCn, field.TypeString, value)
	}
	if value, ok := su.mutation.Episodes(); ok {
		_spec.SetField(subject.FieldEpisodes, field.TypeUint8, value)
	}
	if value, ok := su.mutation.AddedEpisodes(); ok {
		_spec.AddField(subject.FieldEpisodes, field.TypeUint8, value)
	}
	if value, ok := su.mutation.Wish(); ok {
		_spec.SetField(subject.FieldWish, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedWish(); ok {
		_spec.AddField(subject.FieldWish, field.TypeUint32, value)
	}
	if value, ok := su.mutation.Doing(); ok {
		_spec.SetField(subject.FieldDoing, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedDoing(); ok {
		_spec.AddField(subject.FieldDoing, field.TypeUint32, value)
	}
	if value, ok := su.mutation.Watched(); ok {
		_spec.SetField(subject.FieldWatched, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedWatched(); ok {
		_spec.AddField(subject.FieldWatched, field.TypeUint32, value)
	}
	if value, ok := su.mutation.OnHold(); ok {
		_spec.SetField(subject.FieldOnHold, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedOnHold(); ok {
		_spec.AddField(subject.FieldOnHold, field.TypeUint32, value)
	}
	if value, ok := su.mutation.Dropped(); ok {
		_spec.SetField(subject.FieldDropped, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedDropped(); ok {
		_spec.AddField(subject.FieldDropped, field.TypeUint32, value)
	}
	if su.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CollectionsTable,
			Columns: []string{subject.CollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCollectionsIDs(); len(nodes) > 0 && !su.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CollectionsTable,
			Columns: []string{subject.CollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CollectionsTable,
			Columns: []string{subject.CollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SubjectFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subject.SubjectFieldTable,
			Columns: []string{subject.SubjectFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectfield.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SubjectFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subject.SubjectFieldTable,
			Columns: []string{subject.SubjectFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubjectUpdateOne is the builder for updating a single Subject entity.
type SubjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubjectMutation
}

// SetImage sets the "image" field.
func (suo *SubjectUpdateOne) SetImage(s string) *SubjectUpdateOne {
	suo.mutation.SetImage(s)
	return suo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableImage(s *string) *SubjectUpdateOne {
	if s != nil {
		suo.SetImage(*s)
	}
	return suo
}

// SetSummary sets the "summary" field.
func (suo *SubjectUpdateOne) SetSummary(s string) *SubjectUpdateOne {
	suo.mutation.SetSummary(s)
	return suo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableSummary(s *string) *SubjectUpdateOne {
	if s != nil {
		suo.SetSummary(*s)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *SubjectUpdateOne) SetName(s string) *SubjectUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNameCn sets the "name_cn" field.
func (suo *SubjectUpdateOne) SetNameCn(s string) *SubjectUpdateOne {
	suo.mutation.SetNameCn(s)
	return suo
}

// SetEpisodes sets the "episodes" field.
func (suo *SubjectUpdateOne) SetEpisodes(u uint8) *SubjectUpdateOne {
	suo.mutation.ResetEpisodes()
	suo.mutation.SetEpisodes(u)
	return suo
}

// AddEpisodes adds u to the "episodes" field.
func (suo *SubjectUpdateOne) AddEpisodes(u int8) *SubjectUpdateOne {
	suo.mutation.AddEpisodes(u)
	return suo
}

// SetWish sets the "wish" field.
func (suo *SubjectUpdateOne) SetWish(u uint32) *SubjectUpdateOne {
	suo.mutation.ResetWish()
	suo.mutation.SetWish(u)
	return suo
}

// SetNillableWish sets the "wish" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableWish(u *uint32) *SubjectUpdateOne {
	if u != nil {
		suo.SetWish(*u)
	}
	return suo
}

// AddWish adds u to the "wish" field.
func (suo *SubjectUpdateOne) AddWish(u int32) *SubjectUpdateOne {
	suo.mutation.AddWish(u)
	return suo
}

// SetDoing sets the "doing" field.
func (suo *SubjectUpdateOne) SetDoing(u uint32) *SubjectUpdateOne {
	suo.mutation.ResetDoing()
	suo.mutation.SetDoing(u)
	return suo
}

// SetNillableDoing sets the "doing" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableDoing(u *uint32) *SubjectUpdateOne {
	if u != nil {
		suo.SetDoing(*u)
	}
	return suo
}

// AddDoing adds u to the "doing" field.
func (suo *SubjectUpdateOne) AddDoing(u int32) *SubjectUpdateOne {
	suo.mutation.AddDoing(u)
	return suo
}

// SetWatched sets the "watched" field.
func (suo *SubjectUpdateOne) SetWatched(u uint32) *SubjectUpdateOne {
	suo.mutation.ResetWatched()
	suo.mutation.SetWatched(u)
	return suo
}

// SetNillableWatched sets the "watched" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableWatched(u *uint32) *SubjectUpdateOne {
	if u != nil {
		suo.SetWatched(*u)
	}
	return suo
}

// AddWatched adds u to the "watched" field.
func (suo *SubjectUpdateOne) AddWatched(u int32) *SubjectUpdateOne {
	suo.mutation.AddWatched(u)
	return suo
}

// SetOnHold sets the "on_hold" field.
func (suo *SubjectUpdateOne) SetOnHold(u uint32) *SubjectUpdateOne {
	suo.mutation.ResetOnHold()
	suo.mutation.SetOnHold(u)
	return suo
}

// SetNillableOnHold sets the "on_hold" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableOnHold(u *uint32) *SubjectUpdateOne {
	if u != nil {
		suo.SetOnHold(*u)
	}
	return suo
}

// AddOnHold adds u to the "on_hold" field.
func (suo *SubjectUpdateOne) AddOnHold(u int32) *SubjectUpdateOne {
	suo.mutation.AddOnHold(u)
	return suo
}

// SetDropped sets the "dropped" field.
func (suo *SubjectUpdateOne) SetDropped(u uint32) *SubjectUpdateOne {
	suo.mutation.ResetDropped()
	suo.mutation.SetDropped(u)
	return suo
}

// SetNillableDropped sets the "dropped" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableDropped(u *uint32) *SubjectUpdateOne {
	if u != nil {
		suo.SetDropped(*u)
	}
	return suo
}

// AddDropped adds u to the "dropped" field.
func (suo *SubjectUpdateOne) AddDropped(u int32) *SubjectUpdateOne {
	suo.mutation.AddDropped(u)
	return suo
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by IDs.
func (suo *SubjectUpdateOne) AddCollectionIDs(ids ...uint32) *SubjectUpdateOne {
	suo.mutation.AddCollectionIDs(ids...)
	return suo
}

// AddCollections adds the "collections" edges to the Collection entity.
func (suo *SubjectUpdateOne) AddCollections(c ...*Collection) *SubjectUpdateOne {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCollectionIDs(ids...)
}

// SetSubjectFieldID sets the "subject_field" edge to the SubjectField entity by ID.
func (suo *SubjectUpdateOne) SetSubjectFieldID(id int) *SubjectUpdateOne {
	suo.mutation.SetSubjectFieldID(id)
	return suo
}

// SetNillableSubjectFieldID sets the "subject_field" edge to the SubjectField entity by ID if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableSubjectFieldID(id *int) *SubjectUpdateOne {
	if id != nil {
		suo = suo.SetSubjectFieldID(*id)
	}
	return suo
}

// SetSubjectField sets the "subject_field" edge to the SubjectField entity.
func (suo *SubjectUpdateOne) SetSubjectField(s *SubjectField) *SubjectUpdateOne {
	return suo.SetSubjectFieldID(s.ID)
}

// Mutation returns the SubjectMutation object of the builder.
func (suo *SubjectUpdateOne) Mutation() *SubjectMutation {
	return suo.mutation
}

// ClearCollections clears all "collections" edges to the Collection entity.
func (suo *SubjectUpdateOne) ClearCollections() *SubjectUpdateOne {
	suo.mutation.ClearCollections()
	return suo
}

// RemoveCollectionIDs removes the "collections" edge to Collection entities by IDs.
func (suo *SubjectUpdateOne) RemoveCollectionIDs(ids ...uint32) *SubjectUpdateOne {
	suo.mutation.RemoveCollectionIDs(ids...)
	return suo
}

// RemoveCollections removes "collections" edges to Collection entities.
func (suo *SubjectUpdateOne) RemoveCollections(c ...*Collection) *SubjectUpdateOne {
	ids := make([]uint32, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCollectionIDs(ids...)
}

// ClearSubjectField clears the "subject_field" edge to the SubjectField entity.
func (suo *SubjectUpdateOne) ClearSubjectField() *SubjectUpdateOne {
	suo.mutation.ClearSubjectField()
	return suo
}

// Where appends a list predicates to the SubjectUpdate builder.
func (suo *SubjectUpdateOne) Where(ps ...predicate.Subject) *SubjectUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubjectUpdateOne) Select(field string, fields ...string) *SubjectUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subject entity.
func (suo *SubjectUpdateOne) Save(ctx context.Context) (*Subject, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubjectUpdateOne) SaveX(ctx context.Context) *Subject {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubjectUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubjectUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubjectUpdateOne) check() error {
	if v, ok := suo.mutation.Image(); ok {
		if err := subject.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Subject.image": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Summary(); ok {
		if err := subject.SummaryValidator(v); err != nil {
			return &ValidationError{Name: "summary", err: fmt.Errorf(`ent: validator failed for field "Subject.summary": %w`, err)}
		}
	}
	return nil
}

func (suo *SubjectUpdateOne) sqlSave(ctx context.Context) (_node *Subject, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subject.Table, subject.Columns, sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUint32))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subject.FieldID)
		for _, f := range fields {
			if !subject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Image(); ok {
		_spec.SetField(subject.FieldImage, field.TypeString, value)
	}
	if value, ok := suo.mutation.Summary(); ok {
		_spec.SetField(subject.FieldSummary, field.TypeString, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(subject.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.NameCn(); ok {
		_spec.SetField(subject.FieldNameCn, field.TypeString, value)
	}
	if value, ok := suo.mutation.Episodes(); ok {
		_spec.SetField(subject.FieldEpisodes, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.AddedEpisodes(); ok {
		_spec.AddField(subject.FieldEpisodes, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.Wish(); ok {
		_spec.SetField(subject.FieldWish, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedWish(); ok {
		_spec.AddField(subject.FieldWish, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.Doing(); ok {
		_spec.SetField(subject.FieldDoing, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedDoing(); ok {
		_spec.AddField(subject.FieldDoing, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.Watched(); ok {
		_spec.SetField(subject.FieldWatched, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedWatched(); ok {
		_spec.AddField(subject.FieldWatched, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.OnHold(); ok {
		_spec.SetField(subject.FieldOnHold, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedOnHold(); ok {
		_spec.AddField(subject.FieldOnHold, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.Dropped(); ok {
		_spec.SetField(subject.FieldDropped, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedDropped(); ok {
		_spec.AddField(subject.FieldDropped, field.TypeUint32, value)
	}
	if suo.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CollectionsTable,
			Columns: []string{subject.CollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCollectionsIDs(); len(nodes) > 0 && !suo.mutation.CollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CollectionsTable,
			Columns: []string{subject.CollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CollectionsTable,
			Columns: []string{subject.CollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SubjectFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subject.SubjectFieldTable,
			Columns: []string{subject.SubjectFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectfield.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SubjectFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subject.SubjectFieldTable,
			Columns: []string{subject.SubjectFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectfield.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subject{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
