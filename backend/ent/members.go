// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/members"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Members is the model entity for the Members schema.
type Members struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username *string `json:"username,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// Gid holds the value of the "gid" field.
	Gid uint8 `json:"gid,omitempty"`
	// RegisterTime holds the value of the "register_time" field.
	RegisterTime string `json:"register_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MembersQuery when eager-loading is set.
	Edges        MembersEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MembersEdges holds the relations/edges for other nodes in the graph.
type MembersEdges struct {
	// Collections holds the value of the collections edge.
	Collections []*Collection `json:"collections,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CollectionsOrErr returns the Collections value or an error if the edge
// was not loaded in eager-loading.
func (e MembersEdges) CollectionsOrErr() ([]*Collection, error) {
	if e.loadedTypes[0] {
		return e.Collections, nil
	}
	return nil, &NotLoadedError{edge: "collections"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Members) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case members.FieldID, members.FieldGid:
			values[i] = new(sql.NullInt64)
		case members.FieldUsername, members.FieldEmail, members.FieldPassword, members.FieldNickname, members.FieldAvatar, members.FieldRegisterTime:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Members fields.
func (m *Members) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case members.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = uint32(value.Int64)
		case members.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				m.Username = new(string)
				*m.Username = value.String
			}
		case members.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				m.Email = value.String
			}
		case members.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				m.Password = value.String
			}
		case members.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				m.Nickname = value.String
			}
		case members.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				m.Avatar = value.String
			}
		case members.FieldGid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gid", values[i])
			} else if value.Valid {
				m.Gid = uint8(value.Int64)
			}
		case members.FieldRegisterTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field register_time", values[i])
			} else if value.Valid {
				m.RegisterTime = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Members.
// This includes values selected through modifiers, order, etc.
func (m *Members) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryCollections queries the "collections" edge of the Members entity.
func (m *Members) QueryCollections() *CollectionQuery {
	return NewMembersClient(m.config).QueryCollections(m)
}

// Update returns a builder for updating this Members.
// Note that you need to call Members.Unwrap() before calling this method if this Members
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Members) Update() *MembersUpdateOne {
	return NewMembersClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Members entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Members) Unwrap() *Members {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Members is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Members) String() string {
	var builder strings.Builder
	builder.WriteString("Members(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	if v := m.Username; v != nil {
		builder.WriteString("username=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(m.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(m.Password)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(m.Nickname)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(m.Avatar)
	builder.WriteString(", ")
	builder.WriteString("gid=")
	builder.WriteString(fmt.Sprintf("%v", m.Gid))
	builder.WriteString(", ")
	builder.WriteString("register_time=")
	builder.WriteString(m.RegisterTime)
	builder.WriteByte(')')
	return builder.String()
}

// MembersSlice is a parsable slice of Members.
type MembersSlice []*Members
