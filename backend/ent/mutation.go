// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/collection"
	"backend/ent/members"
	"backend/ent/predicate"
	"backend/ent/subject"
	"backend/ent/subjectfield"
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCollection   = "Collection"
	TypeMembers      = "Members"
	TypeSubject      = "Subject"
	TypeSubjectField = "SubjectField"
)

// CollectionMutation represents an operation that mutates the Collection nodes in the graph.
type CollectionMutation struct {
	config
	op             Op
	typ            string
	id             *uint32
	_type          *uint8
	add_type       *int8
	has_comment    *bool
	comment        *string
	score          *uint8
	addscore       *int8
	add_time       *string
	ep_status      *uint8
	addep_status   *int8
	clearedFields  map[string]struct{}
	member         *uint32
	clearedmember  bool
	subject        *uint32
	clearedsubject bool
	done           bool
	oldValue       func(context.Context) (*Collection, error)
	predicates     []predicate.Collection
}

var _ ent.Mutation = (*CollectionMutation)(nil)

// collectionOption allows management of the mutation configuration using functional options.
type collectionOption func(*CollectionMutation)

// newCollectionMutation creates new mutation for the Collection entity.
func newCollectionMutation(c config, op Op, opts ...collectionOption) *CollectionMutation {
	m := &CollectionMutation{
		config:        c,
		op:            op,
		typ:           TypeCollection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCollectionID sets the ID field of the mutation.
func withCollectionID(id uint32) collectionOption {
	return func(m *CollectionMutation) {
		var (
			err   error
			once  sync.Once
			value *Collection
		)
		m.oldValue = func(ctx context.Context) (*Collection, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Collection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCollection sets the old Collection of the mutation.
func withCollection(node *Collection) collectionOption {
	return func(m *CollectionMutation) {
		m.oldValue = func(context.Context) (*Collection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CollectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CollectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Collection entities.
func (m *CollectionMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CollectionMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CollectionMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Collection.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *CollectionMutation) SetType(u uint8) {
	m._type = &u
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *CollectionMutation) GetType() (r uint8, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldType(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds u to the "type" field.
func (m *CollectionMutation) AddType(u int8) {
	if m.add_type != nil {
		*m.add_type += u
	} else {
		m.add_type = &u
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *CollectionMutation) AddedType() (r int8, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *CollectionMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetHasComment sets the "has_comment" field.
func (m *CollectionMutation) SetHasComment(b bool) {
	m.has_comment = &b
}

// HasComment returns the value of the "has_comment" field in the mutation.
func (m *CollectionMutation) HasComment() (r bool, exists bool) {
	v := m.has_comment
	if v == nil {
		return
	}
	return *v, true
}

// OldHasComment returns the old "has_comment" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldHasComment(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasComment: %w", err)
	}
	return oldValue.HasComment, nil
}

// ResetHasComment resets all changes to the "has_comment" field.
func (m *CollectionMutation) ResetHasComment() {
	m.has_comment = nil
}

// SetComment sets the "comment" field.
func (m *CollectionMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *CollectionMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ResetComment resets all changes to the "comment" field.
func (m *CollectionMutation) ResetComment() {
	m.comment = nil
}

// SetScore sets the "score" field.
func (m *CollectionMutation) SetScore(u uint8) {
	m.score = &u
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *CollectionMutation) Score() (r uint8, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldScore(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds u to the "score" field.
func (m *CollectionMutation) AddScore(u int8) {
	if m.addscore != nil {
		*m.addscore += u
	} else {
		m.addscore = &u
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *CollectionMutation) AddedScore() (r int8, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ResetScore resets all changes to the "score" field.
func (m *CollectionMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
}

// SetAddTime sets the "add_time" field.
func (m *CollectionMutation) SetAddTime(s string) {
	m.add_time = &s
}

// AddTime returns the value of the "add_time" field in the mutation.
func (m *CollectionMutation) AddTime() (r string, exists bool) {
	v := m.add_time
	if v == nil {
		return
	}
	return *v, true
}

// OldAddTime returns the old "add_time" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldAddTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddTime: %w", err)
	}
	return oldValue.AddTime, nil
}

// ResetAddTime resets all changes to the "add_time" field.
func (m *CollectionMutation) ResetAddTime() {
	m.add_time = nil
}

// SetEpStatus sets the "ep_status" field.
func (m *CollectionMutation) SetEpStatus(u uint8) {
	m.ep_status = &u
	m.addep_status = nil
}

// EpStatus returns the value of the "ep_status" field in the mutation.
func (m *CollectionMutation) EpStatus() (r uint8, exists bool) {
	v := m.ep_status
	if v == nil {
		return
	}
	return *v, true
}

// OldEpStatus returns the old "ep_status" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldEpStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEpStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEpStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEpStatus: %w", err)
	}
	return oldValue.EpStatus, nil
}

// AddEpStatus adds u to the "ep_status" field.
func (m *CollectionMutation) AddEpStatus(u int8) {
	if m.addep_status != nil {
		*m.addep_status += u
	} else {
		m.addep_status = &u
	}
}

// AddedEpStatus returns the value that was added to the "ep_status" field in this mutation.
func (m *CollectionMutation) AddedEpStatus() (r int8, exists bool) {
	v := m.addep_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetEpStatus resets all changes to the "ep_status" field.
func (m *CollectionMutation) ResetEpStatus() {
	m.ep_status = nil
	m.addep_status = nil
}

// SetMemberID sets the "member" edge to the Members entity by id.
func (m *CollectionMutation) SetMemberID(id uint32) {
	m.member = &id
}

// ClearMember clears the "member" edge to the Members entity.
func (m *CollectionMutation) ClearMember() {
	m.clearedmember = true
}

// MemberCleared reports if the "member" edge to the Members entity was cleared.
func (m *CollectionMutation) MemberCleared() bool {
	return m.clearedmember
}

// MemberID returns the "member" edge ID in the mutation.
func (m *CollectionMutation) MemberID() (id uint32, exists bool) {
	if m.member != nil {
		return *m.member, true
	}
	return
}

// MemberIDs returns the "member" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MemberID instead. It exists only for internal usage by the builders.
func (m *CollectionMutation) MemberIDs() (ids []uint32) {
	if id := m.member; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMember resets all changes to the "member" edge.
func (m *CollectionMutation) ResetMember() {
	m.member = nil
	m.clearedmember = false
}

// SetSubjectID sets the "subject" edge to the Subject entity by id.
func (m *CollectionMutation) SetSubjectID(id uint32) {
	m.subject = &id
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (m *CollectionMutation) ClearSubject() {
	m.clearedsubject = true
}

// SubjectCleared reports if the "subject" edge to the Subject entity was cleared.
func (m *CollectionMutation) SubjectCleared() bool {
	return m.clearedsubject
}

// SubjectID returns the "subject" edge ID in the mutation.
func (m *CollectionMutation) SubjectID() (id uint32, exists bool) {
	if m.subject != nil {
		return *m.subject, true
	}
	return
}

// SubjectIDs returns the "subject" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubjectID instead. It exists only for internal usage by the builders.
func (m *CollectionMutation) SubjectIDs() (ids []uint32) {
	if id := m.subject; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubject resets all changes to the "subject" edge.
func (m *CollectionMutation) ResetSubject() {
	m.subject = nil
	m.clearedsubject = false
}

// Where appends a list predicates to the CollectionMutation builder.
func (m *CollectionMutation) Where(ps ...predicate.Collection) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CollectionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CollectionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Collection, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CollectionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CollectionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Collection).
func (m *CollectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CollectionMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m._type != nil {
		fields = append(fields, collection.FieldType)
	}
	if m.has_comment != nil {
		fields = append(fields, collection.FieldHasComment)
	}
	if m.comment != nil {
		fields = append(fields, collection.FieldComment)
	}
	if m.score != nil {
		fields = append(fields, collection.FieldScore)
	}
	if m.add_time != nil {
		fields = append(fields, collection.FieldAddTime)
	}
	if m.ep_status != nil {
		fields = append(fields, collection.FieldEpStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CollectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case collection.FieldType:
		return m.GetType()
	case collection.FieldHasComment:
		return m.HasComment()
	case collection.FieldComment:
		return m.Comment()
	case collection.FieldScore:
		return m.Score()
	case collection.FieldAddTime:
		return m.AddTime()
	case collection.FieldEpStatus:
		return m.EpStatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CollectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case collection.FieldType:
		return m.OldType(ctx)
	case collection.FieldHasComment:
		return m.OldHasComment(ctx)
	case collection.FieldComment:
		return m.OldComment(ctx)
	case collection.FieldScore:
		return m.OldScore(ctx)
	case collection.FieldAddTime:
		return m.OldAddTime(ctx)
	case collection.FieldEpStatus:
		return m.OldEpStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Collection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case collection.FieldType:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case collection.FieldHasComment:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasComment(v)
		return nil
	case collection.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case collection.FieldScore:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case collection.FieldAddTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddTime(v)
		return nil
	case collection.FieldEpStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEpStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Collection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CollectionMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, collection.FieldType)
	}
	if m.addscore != nil {
		fields = append(fields, collection.FieldScore)
	}
	if m.addep_status != nil {
		fields = append(fields, collection.FieldEpStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CollectionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case collection.FieldType:
		return m.AddedType()
	case collection.FieldScore:
		return m.AddedScore()
	case collection.FieldEpStatus:
		return m.AddedEpStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case collection.FieldType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case collection.FieldScore:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	case collection.FieldEpStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEpStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Collection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CollectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CollectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CollectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Collection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CollectionMutation) ResetField(name string) error {
	switch name {
	case collection.FieldType:
		m.ResetType()
		return nil
	case collection.FieldHasComment:
		m.ResetHasComment()
		return nil
	case collection.FieldComment:
		m.ResetComment()
		return nil
	case collection.FieldScore:
		m.ResetScore()
		return nil
	case collection.FieldAddTime:
		m.ResetAddTime()
		return nil
	case collection.FieldEpStatus:
		m.ResetEpStatus()
		return nil
	}
	return fmt.Errorf("unknown Collection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CollectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.member != nil {
		edges = append(edges, collection.EdgeMember)
	}
	if m.subject != nil {
		edges = append(edges, collection.EdgeSubject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CollectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case collection.EdgeMember:
		if id := m.member; id != nil {
			return []ent.Value{*id}
		}
	case collection.EdgeSubject:
		if id := m.subject; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CollectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CollectionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CollectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmember {
		edges = append(edges, collection.EdgeMember)
	}
	if m.clearedsubject {
		edges = append(edges, collection.EdgeSubject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CollectionMutation) EdgeCleared(name string) bool {
	switch name {
	case collection.EdgeMember:
		return m.clearedmember
	case collection.EdgeSubject:
		return m.clearedsubject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CollectionMutation) ClearEdge(name string) error {
	switch name {
	case collection.EdgeMember:
		m.ClearMember()
		return nil
	case collection.EdgeSubject:
		m.ClearSubject()
		return nil
	}
	return fmt.Errorf("unknown Collection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CollectionMutation) ResetEdge(name string) error {
	switch name {
	case collection.EdgeMember:
		m.ResetMember()
		return nil
	case collection.EdgeSubject:
		m.ResetSubject()
		return nil
	}
	return fmt.Errorf("unknown Collection edge %s", name)
}

// MembersMutation represents an operation that mutates the Members nodes in the graph.
type MembersMutation struct {
	config
	op                 Op
	typ                string
	id                 *uint32
	username           *string
	email              *string
	password           *string
	nickname           *string
	avatar             *string
	gid                *uint8
	addgid             *int8
	register_time      *string
	clearedFields      map[string]struct{}
	collections        map[uint32]struct{}
	removedcollections map[uint32]struct{}
	clearedcollections bool
	done               bool
	oldValue           func(context.Context) (*Members, error)
	predicates         []predicate.Members
}

var _ ent.Mutation = (*MembersMutation)(nil)

// membersOption allows management of the mutation configuration using functional options.
type membersOption func(*MembersMutation)

// newMembersMutation creates new mutation for the Members entity.
func newMembersMutation(c config, op Op, opts ...membersOption) *MembersMutation {
	m := &MembersMutation{
		config:        c,
		op:            op,
		typ:           TypeMembers,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMembersID sets the ID field of the mutation.
func withMembersID(id uint32) membersOption {
	return func(m *MembersMutation) {
		var (
			err   error
			once  sync.Once
			value *Members
		)
		m.oldValue = func(ctx context.Context) (*Members, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Members.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMembers sets the old Members of the mutation.
func withMembers(node *Members) membersOption {
	return func(m *MembersMutation) {
		m.oldValue = func(context.Context) (*Members, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MembersMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MembersMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Members entities.
func (m *MembersMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MembersMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MembersMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Members.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *MembersMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *MembersMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Members entity.
// If the Members object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembersMutation) OldUsername(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *MembersMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the "email" field.
func (m *MembersMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *MembersMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Members entity.
// If the Members object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembersMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *MembersMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *MembersMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *MembersMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Members entity.
// If the Members object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembersMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *MembersMutation) ResetPassword() {
	m.password = nil
}

// SetNickname sets the "nickname" field.
func (m *MembersMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *MembersMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the Members entity.
// If the Members object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembersMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *MembersMutation) ResetNickname() {
	m.nickname = nil
}

// SetAvatar sets the "avatar" field.
func (m *MembersMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *MembersMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the Members entity.
// If the Members object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembersMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *MembersMutation) ResetAvatar() {
	m.avatar = nil
}

// SetGid sets the "gid" field.
func (m *MembersMutation) SetGid(u uint8) {
	m.gid = &u
	m.addgid = nil
}

// Gid returns the value of the "gid" field in the mutation.
func (m *MembersMutation) Gid() (r uint8, exists bool) {
	v := m.gid
	if v == nil {
		return
	}
	return *v, true
}

// OldGid returns the old "gid" field's value of the Members entity.
// If the Members object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembersMutation) OldGid(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGid: %w", err)
	}
	return oldValue.Gid, nil
}

// AddGid adds u to the "gid" field.
func (m *MembersMutation) AddGid(u int8) {
	if m.addgid != nil {
		*m.addgid += u
	} else {
		m.addgid = &u
	}
}

// AddedGid returns the value that was added to the "gid" field in this mutation.
func (m *MembersMutation) AddedGid() (r int8, exists bool) {
	v := m.addgid
	if v == nil {
		return
	}
	return *v, true
}

// ResetGid resets all changes to the "gid" field.
func (m *MembersMutation) ResetGid() {
	m.gid = nil
	m.addgid = nil
}

// SetRegisterTime sets the "register_time" field.
func (m *MembersMutation) SetRegisterTime(s string) {
	m.register_time = &s
}

// RegisterTime returns the value of the "register_time" field in the mutation.
func (m *MembersMutation) RegisterTime() (r string, exists bool) {
	v := m.register_time
	if v == nil {
		return
	}
	return *v, true
}

// OldRegisterTime returns the old "register_time" field's value of the Members entity.
// If the Members object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembersMutation) OldRegisterTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegisterTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegisterTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegisterTime: %w", err)
	}
	return oldValue.RegisterTime, nil
}

// ResetRegisterTime resets all changes to the "register_time" field.
func (m *MembersMutation) ResetRegisterTime() {
	m.register_time = nil
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by ids.
func (m *MembersMutation) AddCollectionIDs(ids ...uint32) {
	if m.collections == nil {
		m.collections = make(map[uint32]struct{})
	}
	for i := range ids {
		m.collections[ids[i]] = struct{}{}
	}
}

// ClearCollections clears the "collections" edge to the Collection entity.
func (m *MembersMutation) ClearCollections() {
	m.clearedcollections = true
}

// CollectionsCleared reports if the "collections" edge to the Collection entity was cleared.
func (m *MembersMutation) CollectionsCleared() bool {
	return m.clearedcollections
}

// RemoveCollectionIDs removes the "collections" edge to the Collection entity by IDs.
func (m *MembersMutation) RemoveCollectionIDs(ids ...uint32) {
	if m.removedcollections == nil {
		m.removedcollections = make(map[uint32]struct{})
	}
	for i := range ids {
		delete(m.collections, ids[i])
		m.removedcollections[ids[i]] = struct{}{}
	}
}

// RemovedCollections returns the removed IDs of the "collections" edge to the Collection entity.
func (m *MembersMutation) RemovedCollectionsIDs() (ids []uint32) {
	for id := range m.removedcollections {
		ids = append(ids, id)
	}
	return
}

// CollectionsIDs returns the "collections" edge IDs in the mutation.
func (m *MembersMutation) CollectionsIDs() (ids []uint32) {
	for id := range m.collections {
		ids = append(ids, id)
	}
	return
}

// ResetCollections resets all changes to the "collections" edge.
func (m *MembersMutation) ResetCollections() {
	m.collections = nil
	m.clearedcollections = false
	m.removedcollections = nil
}

// Where appends a list predicates to the MembersMutation builder.
func (m *MembersMutation) Where(ps ...predicate.Members) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MembersMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MembersMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Members, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MembersMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MembersMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Members).
func (m *MembersMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MembersMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.username != nil {
		fields = append(fields, members.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, members.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, members.FieldPassword)
	}
	if m.nickname != nil {
		fields = append(fields, members.FieldNickname)
	}
	if m.avatar != nil {
		fields = append(fields, members.FieldAvatar)
	}
	if m.gid != nil {
		fields = append(fields, members.FieldGid)
	}
	if m.register_time != nil {
		fields = append(fields, members.FieldRegisterTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MembersMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case members.FieldUsername:
		return m.Username()
	case members.FieldEmail:
		return m.Email()
	case members.FieldPassword:
		return m.Password()
	case members.FieldNickname:
		return m.Nickname()
	case members.FieldAvatar:
		return m.Avatar()
	case members.FieldGid:
		return m.Gid()
	case members.FieldRegisterTime:
		return m.RegisterTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MembersMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case members.FieldUsername:
		return m.OldUsername(ctx)
	case members.FieldEmail:
		return m.OldEmail(ctx)
	case members.FieldPassword:
		return m.OldPassword(ctx)
	case members.FieldNickname:
		return m.OldNickname(ctx)
	case members.FieldAvatar:
		return m.OldAvatar(ctx)
	case members.FieldGid:
		return m.OldGid(ctx)
	case members.FieldRegisterTime:
		return m.OldRegisterTime(ctx)
	}
	return nil, fmt.Errorf("unknown Members field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MembersMutation) SetField(name string, value ent.Value) error {
	switch name {
	case members.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case members.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case members.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case members.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case members.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case members.FieldGid:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGid(v)
		return nil
	case members.FieldRegisterTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegisterTime(v)
		return nil
	}
	return fmt.Errorf("unknown Members field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MembersMutation) AddedFields() []string {
	var fields []string
	if m.addgid != nil {
		fields = append(fields, members.FieldGid)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MembersMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case members.FieldGid:
		return m.AddedGid()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MembersMutation) AddField(name string, value ent.Value) error {
	switch name {
	case members.FieldGid:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGid(v)
		return nil
	}
	return fmt.Errorf("unknown Members numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MembersMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MembersMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MembersMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Members nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MembersMutation) ResetField(name string) error {
	switch name {
	case members.FieldUsername:
		m.ResetUsername()
		return nil
	case members.FieldEmail:
		m.ResetEmail()
		return nil
	case members.FieldPassword:
		m.ResetPassword()
		return nil
	case members.FieldNickname:
		m.ResetNickname()
		return nil
	case members.FieldAvatar:
		m.ResetAvatar()
		return nil
	case members.FieldGid:
		m.ResetGid()
		return nil
	case members.FieldRegisterTime:
		m.ResetRegisterTime()
		return nil
	}
	return fmt.Errorf("unknown Members field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MembersMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.collections != nil {
		edges = append(edges, members.EdgeCollections)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MembersMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case members.EdgeCollections:
		ids := make([]ent.Value, 0, len(m.collections))
		for id := range m.collections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MembersMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcollections != nil {
		edges = append(edges, members.EdgeCollections)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MembersMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case members.EdgeCollections:
		ids := make([]ent.Value, 0, len(m.removedcollections))
		for id := range m.removedcollections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MembersMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcollections {
		edges = append(edges, members.EdgeCollections)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MembersMutation) EdgeCleared(name string) bool {
	switch name {
	case members.EdgeCollections:
		return m.clearedcollections
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MembersMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Members unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MembersMutation) ResetEdge(name string) error {
	switch name {
	case members.EdgeCollections:
		m.ResetCollections()
		return nil
	}
	return fmt.Errorf("unknown Members edge %s", name)
}

// SubjectMutation represents an operation that mutates the Subject nodes in the graph.
type SubjectMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uint32
	image                *string
	summary              *string
	name                 *string
	name_cn              *string
	episodes             *uint8
	addepisodes          *int8
	wish                 *uint32
	addwish              *int32
	doing                *uint32
	adddoing             *int32
	watched              *uint32
	addwatched           *int32
	on_hold              *uint32
	addon_hold           *int32
	dropped              *uint32
	adddropped           *int32
	clearedFields        map[string]struct{}
	collections          map[uint32]struct{}
	removedcollections   map[uint32]struct{}
	clearedcollections   bool
	subject_field        *int
	clearedsubject_field bool
	done                 bool
	oldValue             func(context.Context) (*Subject, error)
	predicates           []predicate.Subject
}

var _ ent.Mutation = (*SubjectMutation)(nil)

// subjectOption allows management of the mutation configuration using functional options.
type subjectOption func(*SubjectMutation)

// newSubjectMutation creates new mutation for the Subject entity.
func newSubjectMutation(c config, op Op, opts ...subjectOption) *SubjectMutation {
	m := &SubjectMutation{
		config:        c,
		op:            op,
		typ:           TypeSubject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubjectID sets the ID field of the mutation.
func withSubjectID(id uint32) subjectOption {
	return func(m *SubjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Subject
		)
		m.oldValue = func(ctx context.Context) (*Subject, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Subject.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubject sets the old Subject of the mutation.
func withSubject(node *Subject) subjectOption {
	return func(m *SubjectMutation) {
		m.oldValue = func(context.Context) (*Subject, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Subject entities.
func (m *SubjectMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubjectMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubjectMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Subject.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetImage sets the "image" field.
func (m *SubjectMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *SubjectMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Subject entity.
// If the Subject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *SubjectMutation) ResetImage() {
	m.image = nil
}

// SetSummary sets the "summary" field.
func (m *SubjectMutation) SetSummary(s string) {
	m.summary = &s
}

// Summary returns the value of the "summary" field in the mutation.
func (m *SubjectMutation) Summary() (r string, exists bool) {
	v := m.summary
	if v == nil {
		return
	}
	return *v, true
}

// OldSummary returns the old "summary" field's value of the Subject entity.
// If the Subject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectMutation) OldSummary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummary: %w", err)
	}
	return oldValue.Summary, nil
}

// ResetSummary resets all changes to the "summary" field.
func (m *SubjectMutation) ResetSummary() {
	m.summary = nil
}

// SetName sets the "name" field.
func (m *SubjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SubjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Subject entity.
// If the Subject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SubjectMutation) ResetName() {
	m.name = nil
}

// SetNameCn sets the "name_cn" field.
func (m *SubjectMutation) SetNameCn(s string) {
	m.name_cn = &s
}

// NameCn returns the value of the "name_cn" field in the mutation.
func (m *SubjectMutation) NameCn() (r string, exists bool) {
	v := m.name_cn
	if v == nil {
		return
	}
	return *v, true
}

// OldNameCn returns the old "name_cn" field's value of the Subject entity.
// If the Subject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectMutation) OldNameCn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameCn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameCn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameCn: %w", err)
	}
	return oldValue.NameCn, nil
}

// ResetNameCn resets all changes to the "name_cn" field.
func (m *SubjectMutation) ResetNameCn() {
	m.name_cn = nil
}

// SetEpisodes sets the "episodes" field.
func (m *SubjectMutation) SetEpisodes(u uint8) {
	m.episodes = &u
	m.addepisodes = nil
}

// Episodes returns the value of the "episodes" field in the mutation.
func (m *SubjectMutation) Episodes() (r uint8, exists bool) {
	v := m.episodes
	if v == nil {
		return
	}
	return *v, true
}

// OldEpisodes returns the old "episodes" field's value of the Subject entity.
// If the Subject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectMutation) OldEpisodes(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEpisodes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEpisodes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEpisodes: %w", err)
	}
	return oldValue.Episodes, nil
}

// AddEpisodes adds u to the "episodes" field.
func (m *SubjectMutation) AddEpisodes(u int8) {
	if m.addepisodes != nil {
		*m.addepisodes += u
	} else {
		m.addepisodes = &u
	}
}

// AddedEpisodes returns the value that was added to the "episodes" field in this mutation.
func (m *SubjectMutation) AddedEpisodes() (r int8, exists bool) {
	v := m.addepisodes
	if v == nil {
		return
	}
	return *v, true
}

// ResetEpisodes resets all changes to the "episodes" field.
func (m *SubjectMutation) ResetEpisodes() {
	m.episodes = nil
	m.addepisodes = nil
}

// SetWish sets the "wish" field.
func (m *SubjectMutation) SetWish(u uint32) {
	m.wish = &u
	m.addwish = nil
}

// Wish returns the value of the "wish" field in the mutation.
func (m *SubjectMutation) Wish() (r uint32, exists bool) {
	v := m.wish
	if v == nil {
		return
	}
	return *v, true
}

// OldWish returns the old "wish" field's value of the Subject entity.
// If the Subject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectMutation) OldWish(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWish is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWish requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWish: %w", err)
	}
	return oldValue.Wish, nil
}

// AddWish adds u to the "wish" field.
func (m *SubjectMutation) AddWish(u int32) {
	if m.addwish != nil {
		*m.addwish += u
	} else {
		m.addwish = &u
	}
}

// AddedWish returns the value that was added to the "wish" field in this mutation.
func (m *SubjectMutation) AddedWish() (r int32, exists bool) {
	v := m.addwish
	if v == nil {
		return
	}
	return *v, true
}

// ResetWish resets all changes to the "wish" field.
func (m *SubjectMutation) ResetWish() {
	m.wish = nil
	m.addwish = nil
}

// SetDoing sets the "doing" field.
func (m *SubjectMutation) SetDoing(u uint32) {
	m.doing = &u
	m.adddoing = nil
}

// Doing returns the value of the "doing" field in the mutation.
func (m *SubjectMutation) Doing() (r uint32, exists bool) {
	v := m.doing
	if v == nil {
		return
	}
	return *v, true
}

// OldDoing returns the old "doing" field's value of the Subject entity.
// If the Subject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectMutation) OldDoing(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDoing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDoing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoing: %w", err)
	}
	return oldValue.Doing, nil
}

// AddDoing adds u to the "doing" field.
func (m *SubjectMutation) AddDoing(u int32) {
	if m.adddoing != nil {
		*m.adddoing += u
	} else {
		m.adddoing = &u
	}
}

// AddedDoing returns the value that was added to the "doing" field in this mutation.
func (m *SubjectMutation) AddedDoing() (r int32, exists bool) {
	v := m.adddoing
	if v == nil {
		return
	}
	return *v, true
}

// ResetDoing resets all changes to the "doing" field.
func (m *SubjectMutation) ResetDoing() {
	m.doing = nil
	m.adddoing = nil
}

// SetWatched sets the "watched" field.
func (m *SubjectMutation) SetWatched(u uint32) {
	m.watched = &u
	m.addwatched = nil
}

// Watched returns the value of the "watched" field in the mutation.
func (m *SubjectMutation) Watched() (r uint32, exists bool) {
	v := m.watched
	if v == nil {
		return
	}
	return *v, true
}

// OldWatched returns the old "watched" field's value of the Subject entity.
// If the Subject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectMutation) OldWatched(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWatched is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWatched requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWatched: %w", err)
	}
	return oldValue.Watched, nil
}

// AddWatched adds u to the "watched" field.
func (m *SubjectMutation) AddWatched(u int32) {
	if m.addwatched != nil {
		*m.addwatched += u
	} else {
		m.addwatched = &u
	}
}

// AddedWatched returns the value that was added to the "watched" field in this mutation.
func (m *SubjectMutation) AddedWatched() (r int32, exists bool) {
	v := m.addwatched
	if v == nil {
		return
	}
	return *v, true
}

// ResetWatched resets all changes to the "watched" field.
func (m *SubjectMutation) ResetWatched() {
	m.watched = nil
	m.addwatched = nil
}

// SetOnHold sets the "on_hold" field.
func (m *SubjectMutation) SetOnHold(u uint32) {
	m.on_hold = &u
	m.addon_hold = nil
}

// OnHold returns the value of the "on_hold" field in the mutation.
func (m *SubjectMutation) OnHold() (r uint32, exists bool) {
	v := m.on_hold
	if v == nil {
		return
	}
	return *v, true
}

// OldOnHold returns the old "on_hold" field's value of the Subject entity.
// If the Subject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectMutation) OldOnHold(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOnHold is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOnHold requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOnHold: %w", err)
	}
	return oldValue.OnHold, nil
}

// AddOnHold adds u to the "on_hold" field.
func (m *SubjectMutation) AddOnHold(u int32) {
	if m.addon_hold != nil {
		*m.addon_hold += u
	} else {
		m.addon_hold = &u
	}
}

// AddedOnHold returns the value that was added to the "on_hold" field in this mutation.
func (m *SubjectMutation) AddedOnHold() (r int32, exists bool) {
	v := m.addon_hold
	if v == nil {
		return
	}
	return *v, true
}

// ResetOnHold resets all changes to the "on_hold" field.
func (m *SubjectMutation) ResetOnHold() {
	m.on_hold = nil
	m.addon_hold = nil
}

// SetDropped sets the "dropped" field.
func (m *SubjectMutation) SetDropped(u uint32) {
	m.dropped = &u
	m.adddropped = nil
}

// Dropped returns the value of the "dropped" field in the mutation.
func (m *SubjectMutation) Dropped() (r uint32, exists bool) {
	v := m.dropped
	if v == nil {
		return
	}
	return *v, true
}

// OldDropped returns the old "dropped" field's value of the Subject entity.
// If the Subject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectMutation) OldDropped(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDropped is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDropped requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDropped: %w", err)
	}
	return oldValue.Dropped, nil
}

// AddDropped adds u to the "dropped" field.
func (m *SubjectMutation) AddDropped(u int32) {
	if m.adddropped != nil {
		*m.adddropped += u
	} else {
		m.adddropped = &u
	}
}

// AddedDropped returns the value that was added to the "dropped" field in this mutation.
func (m *SubjectMutation) AddedDropped() (r int32, exists bool) {
	v := m.adddropped
	if v == nil {
		return
	}
	return *v, true
}

// ResetDropped resets all changes to the "dropped" field.
func (m *SubjectMutation) ResetDropped() {
	m.dropped = nil
	m.adddropped = nil
}

// AddCollectionIDs adds the "collections" edge to the Collection entity by ids.
func (m *SubjectMutation) AddCollectionIDs(ids ...uint32) {
	if m.collections == nil {
		m.collections = make(map[uint32]struct{})
	}
	for i := range ids {
		m.collections[ids[i]] = struct{}{}
	}
}

// ClearCollections clears the "collections" edge to the Collection entity.
func (m *SubjectMutation) ClearCollections() {
	m.clearedcollections = true
}

// CollectionsCleared reports if the "collections" edge to the Collection entity was cleared.
func (m *SubjectMutation) CollectionsCleared() bool {
	return m.clearedcollections
}

// RemoveCollectionIDs removes the "collections" edge to the Collection entity by IDs.
func (m *SubjectMutation) RemoveCollectionIDs(ids ...uint32) {
	if m.removedcollections == nil {
		m.removedcollections = make(map[uint32]struct{})
	}
	for i := range ids {
		delete(m.collections, ids[i])
		m.removedcollections[ids[i]] = struct{}{}
	}
}

// RemovedCollections returns the removed IDs of the "collections" edge to the Collection entity.
func (m *SubjectMutation) RemovedCollectionsIDs() (ids []uint32) {
	for id := range m.removedcollections {
		ids = append(ids, id)
	}
	return
}

// CollectionsIDs returns the "collections" edge IDs in the mutation.
func (m *SubjectMutation) CollectionsIDs() (ids []uint32) {
	for id := range m.collections {
		ids = append(ids, id)
	}
	return
}

// ResetCollections resets all changes to the "collections" edge.
func (m *SubjectMutation) ResetCollections() {
	m.collections = nil
	m.clearedcollections = false
	m.removedcollections = nil
}

// SetSubjectFieldID sets the "subject_field" edge to the SubjectField entity by id.
func (m *SubjectMutation) SetSubjectFieldID(id int) {
	m.subject_field = &id
}

// ClearSubjectField clears the "subject_field" edge to the SubjectField entity.
func (m *SubjectMutation) ClearSubjectField() {
	m.clearedsubject_field = true
}

// SubjectFieldCleared reports if the "subject_field" edge to the SubjectField entity was cleared.
func (m *SubjectMutation) SubjectFieldCleared() bool {
	return m.clearedsubject_field
}

// SubjectFieldID returns the "subject_field" edge ID in the mutation.
func (m *SubjectMutation) SubjectFieldID() (id int, exists bool) {
	if m.subject_field != nil {
		return *m.subject_field, true
	}
	return
}

// SubjectFieldIDs returns the "subject_field" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubjectFieldID instead. It exists only for internal usage by the builders.
func (m *SubjectMutation) SubjectFieldIDs() (ids []int) {
	if id := m.subject_field; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubjectField resets all changes to the "subject_field" edge.
func (m *SubjectMutation) ResetSubjectField() {
	m.subject_field = nil
	m.clearedsubject_field = false
}

// Where appends a list predicates to the SubjectMutation builder.
func (m *SubjectMutation) Where(ps ...predicate.Subject) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Subject, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Subject).
func (m *SubjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubjectMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.image != nil {
		fields = append(fields, subject.FieldImage)
	}
	if m.summary != nil {
		fields = append(fields, subject.FieldSummary)
	}
	if m.name != nil {
		fields = append(fields, subject.FieldName)
	}
	if m.name_cn != nil {
		fields = append(fields, subject.FieldNameCn)
	}
	if m.episodes != nil {
		fields = append(fields, subject.FieldEpisodes)
	}
	if m.wish != nil {
		fields = append(fields, subject.FieldWish)
	}
	if m.doing != nil {
		fields = append(fields, subject.FieldDoing)
	}
	if m.watched != nil {
		fields = append(fields, subject.FieldWatched)
	}
	if m.on_hold != nil {
		fields = append(fields, subject.FieldOnHold)
	}
	if m.dropped != nil {
		fields = append(fields, subject.FieldDropped)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subject.FieldImage:
		return m.Image()
	case subject.FieldSummary:
		return m.Summary()
	case subject.FieldName:
		return m.Name()
	case subject.FieldNameCn:
		return m.NameCn()
	case subject.FieldEpisodes:
		return m.Episodes()
	case subject.FieldWish:
		return m.Wish()
	case subject.FieldDoing:
		return m.Doing()
	case subject.FieldWatched:
		return m.Watched()
	case subject.FieldOnHold:
		return m.OnHold()
	case subject.FieldDropped:
		return m.Dropped()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subject.FieldImage:
		return m.OldImage(ctx)
	case subject.FieldSummary:
		return m.OldSummary(ctx)
	case subject.FieldName:
		return m.OldName(ctx)
	case subject.FieldNameCn:
		return m.OldNameCn(ctx)
	case subject.FieldEpisodes:
		return m.OldEpisodes(ctx)
	case subject.FieldWish:
		return m.OldWish(ctx)
	case subject.FieldDoing:
		return m.OldDoing(ctx)
	case subject.FieldWatched:
		return m.OldWatched(ctx)
	case subject.FieldOnHold:
		return m.OldOnHold(ctx)
	case subject.FieldDropped:
		return m.OldDropped(ctx)
	}
	return nil, fmt.Errorf("unknown Subject field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subject.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case subject.FieldSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummary(v)
		return nil
	case subject.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case subject.FieldNameCn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameCn(v)
		return nil
	case subject.FieldEpisodes:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEpisodes(v)
		return nil
	case subject.FieldWish:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWish(v)
		return nil
	case subject.FieldDoing:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoing(v)
		return nil
	case subject.FieldWatched:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWatched(v)
		return nil
	case subject.FieldOnHold:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOnHold(v)
		return nil
	case subject.FieldDropped:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDropped(v)
		return nil
	}
	return fmt.Errorf("unknown Subject field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubjectMutation) AddedFields() []string {
	var fields []string
	if m.addepisodes != nil {
		fields = append(fields, subject.FieldEpisodes)
	}
	if m.addwish != nil {
		fields = append(fields, subject.FieldWish)
	}
	if m.adddoing != nil {
		fields = append(fields, subject.FieldDoing)
	}
	if m.addwatched != nil {
		fields = append(fields, subject.FieldWatched)
	}
	if m.addon_hold != nil {
		fields = append(fields, subject.FieldOnHold)
	}
	if m.adddropped != nil {
		fields = append(fields, subject.FieldDropped)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubjectMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subject.FieldEpisodes:
		return m.AddedEpisodes()
	case subject.FieldWish:
		return m.AddedWish()
	case subject.FieldDoing:
		return m.AddedDoing()
	case subject.FieldWatched:
		return m.AddedWatched()
	case subject.FieldOnHold:
		return m.AddedOnHold()
	case subject.FieldDropped:
		return m.AddedDropped()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subject.FieldEpisodes:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEpisodes(v)
		return nil
	case subject.FieldWish:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWish(v)
		return nil
	case subject.FieldDoing:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDoing(v)
		return nil
	case subject.FieldWatched:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWatched(v)
		return nil
	case subject.FieldOnHold:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOnHold(v)
		return nil
	case subject.FieldDropped:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDropped(v)
		return nil
	}
	return fmt.Errorf("unknown Subject numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubjectMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubjectMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Subject nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubjectMutation) ResetField(name string) error {
	switch name {
	case subject.FieldImage:
		m.ResetImage()
		return nil
	case subject.FieldSummary:
		m.ResetSummary()
		return nil
	case subject.FieldName:
		m.ResetName()
		return nil
	case subject.FieldNameCn:
		m.ResetNameCn()
		return nil
	case subject.FieldEpisodes:
		m.ResetEpisodes()
		return nil
	case subject.FieldWish:
		m.ResetWish()
		return nil
	case subject.FieldDoing:
		m.ResetDoing()
		return nil
	case subject.FieldWatched:
		m.ResetWatched()
		return nil
	case subject.FieldOnHold:
		m.ResetOnHold()
		return nil
	case subject.FieldDropped:
		m.ResetDropped()
		return nil
	}
	return fmt.Errorf("unknown Subject field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.collections != nil {
		edges = append(edges, subject.EdgeCollections)
	}
	if m.subject_field != nil {
		edges = append(edges, subject.EdgeSubjectField)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subject.EdgeCollections:
		ids := make([]ent.Value, 0, len(m.collections))
		for id := range m.collections {
			ids = append(ids, id)
		}
		return ids
	case subject.EdgeSubjectField:
		if id := m.subject_field; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcollections != nil {
		edges = append(edges, subject.EdgeCollections)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case subject.EdgeCollections:
		ids := make([]ent.Value, 0, len(m.removedcollections))
		for id := range m.removedcollections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcollections {
		edges = append(edges, subject.EdgeCollections)
	}
	if m.clearedsubject_field {
		edges = append(edges, subject.EdgeSubjectField)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubjectMutation) EdgeCleared(name string) bool {
	switch name {
	case subject.EdgeCollections:
		return m.clearedcollections
	case subject.EdgeSubjectField:
		return m.clearedsubject_field
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubjectMutation) ClearEdge(name string) error {
	switch name {
	case subject.EdgeSubjectField:
		m.ClearSubjectField()
		return nil
	}
	return fmt.Errorf("unknown Subject unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubjectMutation) ResetEdge(name string) error {
	switch name {
	case subject.EdgeCollections:
		m.ResetCollections()
		return nil
	case subject.EdgeSubjectField:
		m.ResetSubjectField()
		return nil
	}
	return fmt.Errorf("unknown Subject edge %s", name)
}

// SubjectFieldMutation represents an operation that mutates the SubjectField nodes in the graph.
type SubjectFieldMutation struct {
	config
	op               Op
	typ              string
	id               *int
	rate_1           *uint32
	addrate_1        *int32
	rate_2           *uint32
	addrate_2        *int32
	rate_3           *uint32
	addrate_3        *int32
	rate_4           *uint32
	addrate_4        *int32
	rate_5           *uint32
	addrate_5        *int32
	rate_6           *uint32
	addrate_6        *int32
	rate_7           *uint32
	addrate_7        *int32
	rate_8           *uint32
	addrate_8        *int32
	rate_9           *uint32
	addrate_9        *int32
	rate_10          *uint32
	addrate_10       *int32
	average_score    *float64
	addaverage_score *float64
	rank             *uint32
	addrank          *int32
	year             *uint32
	addyear          *int32
	month            *uint8
	addmonth         *int8
	date             *uint8
	adddate          *int8
	weekday          *uint8
	addweekday       *int8
	clearedFields    map[string]struct{}
	subject          *uint32
	clearedsubject   bool
	done             bool
	oldValue         func(context.Context) (*SubjectField, error)
	predicates       []predicate.SubjectField
}

var _ ent.Mutation = (*SubjectFieldMutation)(nil)

// subjectfieldOption allows management of the mutation configuration using functional options.
type subjectfieldOption func(*SubjectFieldMutation)

// newSubjectFieldMutation creates new mutation for the SubjectField entity.
func newSubjectFieldMutation(c config, op Op, opts ...subjectfieldOption) *SubjectFieldMutation {
	m := &SubjectFieldMutation{
		config:        c,
		op:            op,
		typ:           TypeSubjectField,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubjectFieldID sets the ID field of the mutation.
func withSubjectFieldID(id int) subjectfieldOption {
	return func(m *SubjectFieldMutation) {
		var (
			err   error
			once  sync.Once
			value *SubjectField
		)
		m.oldValue = func(ctx context.Context) (*SubjectField, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubjectField.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubjectField sets the old SubjectField of the mutation.
func withSubjectField(node *SubjectField) subjectfieldOption {
	return func(m *SubjectFieldMutation) {
		m.oldValue = func(context.Context) (*SubjectField, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubjectFieldMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubjectFieldMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubjectFieldMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubjectFieldMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SubjectField.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRate1 sets the "rate_1" field.
func (m *SubjectFieldMutation) SetRate1(u uint32) {
	m.rate_1 = &u
	m.addrate_1 = nil
}

// Rate1 returns the value of the "rate_1" field in the mutation.
func (m *SubjectFieldMutation) Rate1() (r uint32, exists bool) {
	v := m.rate_1
	if v == nil {
		return
	}
	return *v, true
}

// OldRate1 returns the old "rate_1" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldRate1(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate1: %w", err)
	}
	return oldValue.Rate1, nil
}

// AddRate1 adds u to the "rate_1" field.
func (m *SubjectFieldMutation) AddRate1(u int32) {
	if m.addrate_1 != nil {
		*m.addrate_1 += u
	} else {
		m.addrate_1 = &u
	}
}

// AddedRate1 returns the value that was added to the "rate_1" field in this mutation.
func (m *SubjectFieldMutation) AddedRate1() (r int32, exists bool) {
	v := m.addrate_1
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate1 resets all changes to the "rate_1" field.
func (m *SubjectFieldMutation) ResetRate1() {
	m.rate_1 = nil
	m.addrate_1 = nil
}

// SetRate2 sets the "rate_2" field.
func (m *SubjectFieldMutation) SetRate2(u uint32) {
	m.rate_2 = &u
	m.addrate_2 = nil
}

// Rate2 returns the value of the "rate_2" field in the mutation.
func (m *SubjectFieldMutation) Rate2() (r uint32, exists bool) {
	v := m.rate_2
	if v == nil {
		return
	}
	return *v, true
}

// OldRate2 returns the old "rate_2" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldRate2(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate2: %w", err)
	}
	return oldValue.Rate2, nil
}

// AddRate2 adds u to the "rate_2" field.
func (m *SubjectFieldMutation) AddRate2(u int32) {
	if m.addrate_2 != nil {
		*m.addrate_2 += u
	} else {
		m.addrate_2 = &u
	}
}

// AddedRate2 returns the value that was added to the "rate_2" field in this mutation.
func (m *SubjectFieldMutation) AddedRate2() (r int32, exists bool) {
	v := m.addrate_2
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate2 resets all changes to the "rate_2" field.
func (m *SubjectFieldMutation) ResetRate2() {
	m.rate_2 = nil
	m.addrate_2 = nil
}

// SetRate3 sets the "rate_3" field.
func (m *SubjectFieldMutation) SetRate3(u uint32) {
	m.rate_3 = &u
	m.addrate_3 = nil
}

// Rate3 returns the value of the "rate_3" field in the mutation.
func (m *SubjectFieldMutation) Rate3() (r uint32, exists bool) {
	v := m.rate_3
	if v == nil {
		return
	}
	return *v, true
}

// OldRate3 returns the old "rate_3" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldRate3(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate3: %w", err)
	}
	return oldValue.Rate3, nil
}

// AddRate3 adds u to the "rate_3" field.
func (m *SubjectFieldMutation) AddRate3(u int32) {
	if m.addrate_3 != nil {
		*m.addrate_3 += u
	} else {
		m.addrate_3 = &u
	}
}

// AddedRate3 returns the value that was added to the "rate_3" field in this mutation.
func (m *SubjectFieldMutation) AddedRate3() (r int32, exists bool) {
	v := m.addrate_3
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate3 resets all changes to the "rate_3" field.
func (m *SubjectFieldMutation) ResetRate3() {
	m.rate_3 = nil
	m.addrate_3 = nil
}

// SetRate4 sets the "rate_4" field.
func (m *SubjectFieldMutation) SetRate4(u uint32) {
	m.rate_4 = &u
	m.addrate_4 = nil
}

// Rate4 returns the value of the "rate_4" field in the mutation.
func (m *SubjectFieldMutation) Rate4() (r uint32, exists bool) {
	v := m.rate_4
	if v == nil {
		return
	}
	return *v, true
}

// OldRate4 returns the old "rate_4" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldRate4(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate4: %w", err)
	}
	return oldValue.Rate4, nil
}

// AddRate4 adds u to the "rate_4" field.
func (m *SubjectFieldMutation) AddRate4(u int32) {
	if m.addrate_4 != nil {
		*m.addrate_4 += u
	} else {
		m.addrate_4 = &u
	}
}

// AddedRate4 returns the value that was added to the "rate_4" field in this mutation.
func (m *SubjectFieldMutation) AddedRate4() (r int32, exists bool) {
	v := m.addrate_4
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate4 resets all changes to the "rate_4" field.
func (m *SubjectFieldMutation) ResetRate4() {
	m.rate_4 = nil
	m.addrate_4 = nil
}

// SetRate5 sets the "rate_5" field.
func (m *SubjectFieldMutation) SetRate5(u uint32) {
	m.rate_5 = &u
	m.addrate_5 = nil
}

// Rate5 returns the value of the "rate_5" field in the mutation.
func (m *SubjectFieldMutation) Rate5() (r uint32, exists bool) {
	v := m.rate_5
	if v == nil {
		return
	}
	return *v, true
}

// OldRate5 returns the old "rate_5" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldRate5(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate5: %w", err)
	}
	return oldValue.Rate5, nil
}

// AddRate5 adds u to the "rate_5" field.
func (m *SubjectFieldMutation) AddRate5(u int32) {
	if m.addrate_5 != nil {
		*m.addrate_5 += u
	} else {
		m.addrate_5 = &u
	}
}

// AddedRate5 returns the value that was added to the "rate_5" field in this mutation.
func (m *SubjectFieldMutation) AddedRate5() (r int32, exists bool) {
	v := m.addrate_5
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate5 resets all changes to the "rate_5" field.
func (m *SubjectFieldMutation) ResetRate5() {
	m.rate_5 = nil
	m.addrate_5 = nil
}

// SetRate6 sets the "rate_6" field.
func (m *SubjectFieldMutation) SetRate6(u uint32) {
	m.rate_6 = &u
	m.addrate_6 = nil
}

// Rate6 returns the value of the "rate_6" field in the mutation.
func (m *SubjectFieldMutation) Rate6() (r uint32, exists bool) {
	v := m.rate_6
	if v == nil {
		return
	}
	return *v, true
}

// OldRate6 returns the old "rate_6" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldRate6(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate6 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate6 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate6: %w", err)
	}
	return oldValue.Rate6, nil
}

// AddRate6 adds u to the "rate_6" field.
func (m *SubjectFieldMutation) AddRate6(u int32) {
	if m.addrate_6 != nil {
		*m.addrate_6 += u
	} else {
		m.addrate_6 = &u
	}
}

// AddedRate6 returns the value that was added to the "rate_6" field in this mutation.
func (m *SubjectFieldMutation) AddedRate6() (r int32, exists bool) {
	v := m.addrate_6
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate6 resets all changes to the "rate_6" field.
func (m *SubjectFieldMutation) ResetRate6() {
	m.rate_6 = nil
	m.addrate_6 = nil
}

// SetRate7 sets the "rate_7" field.
func (m *SubjectFieldMutation) SetRate7(u uint32) {
	m.rate_7 = &u
	m.addrate_7 = nil
}

// Rate7 returns the value of the "rate_7" field in the mutation.
func (m *SubjectFieldMutation) Rate7() (r uint32, exists bool) {
	v := m.rate_7
	if v == nil {
		return
	}
	return *v, true
}

// OldRate7 returns the old "rate_7" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldRate7(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate7 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate7 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate7: %w", err)
	}
	return oldValue.Rate7, nil
}

// AddRate7 adds u to the "rate_7" field.
func (m *SubjectFieldMutation) AddRate7(u int32) {
	if m.addrate_7 != nil {
		*m.addrate_7 += u
	} else {
		m.addrate_7 = &u
	}
}

// AddedRate7 returns the value that was added to the "rate_7" field in this mutation.
func (m *SubjectFieldMutation) AddedRate7() (r int32, exists bool) {
	v := m.addrate_7
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate7 resets all changes to the "rate_7" field.
func (m *SubjectFieldMutation) ResetRate7() {
	m.rate_7 = nil
	m.addrate_7 = nil
}

// SetRate8 sets the "rate_8" field.
func (m *SubjectFieldMutation) SetRate8(u uint32) {
	m.rate_8 = &u
	m.addrate_8 = nil
}

// Rate8 returns the value of the "rate_8" field in the mutation.
func (m *SubjectFieldMutation) Rate8() (r uint32, exists bool) {
	v := m.rate_8
	if v == nil {
		return
	}
	return *v, true
}

// OldRate8 returns the old "rate_8" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldRate8(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate8 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate8 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate8: %w", err)
	}
	return oldValue.Rate8, nil
}

// AddRate8 adds u to the "rate_8" field.
func (m *SubjectFieldMutation) AddRate8(u int32) {
	if m.addrate_8 != nil {
		*m.addrate_8 += u
	} else {
		m.addrate_8 = &u
	}
}

// AddedRate8 returns the value that was added to the "rate_8" field in this mutation.
func (m *SubjectFieldMutation) AddedRate8() (r int32, exists bool) {
	v := m.addrate_8
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate8 resets all changes to the "rate_8" field.
func (m *SubjectFieldMutation) ResetRate8() {
	m.rate_8 = nil
	m.addrate_8 = nil
}

// SetRate9 sets the "rate_9" field.
func (m *SubjectFieldMutation) SetRate9(u uint32) {
	m.rate_9 = &u
	m.addrate_9 = nil
}

// Rate9 returns the value of the "rate_9" field in the mutation.
func (m *SubjectFieldMutation) Rate9() (r uint32, exists bool) {
	v := m.rate_9
	if v == nil {
		return
	}
	return *v, true
}

// OldRate9 returns the old "rate_9" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldRate9(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate9 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate9 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate9: %w", err)
	}
	return oldValue.Rate9, nil
}

// AddRate9 adds u to the "rate_9" field.
func (m *SubjectFieldMutation) AddRate9(u int32) {
	if m.addrate_9 != nil {
		*m.addrate_9 += u
	} else {
		m.addrate_9 = &u
	}
}

// AddedRate9 returns the value that was added to the "rate_9" field in this mutation.
func (m *SubjectFieldMutation) AddedRate9() (r int32, exists bool) {
	v := m.addrate_9
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate9 resets all changes to the "rate_9" field.
func (m *SubjectFieldMutation) ResetRate9() {
	m.rate_9 = nil
	m.addrate_9 = nil
}

// SetRate10 sets the "rate_10" field.
func (m *SubjectFieldMutation) SetRate10(u uint32) {
	m.rate_10 = &u
	m.addrate_10 = nil
}

// Rate10 returns the value of the "rate_10" field in the mutation.
func (m *SubjectFieldMutation) Rate10() (r uint32, exists bool) {
	v := m.rate_10
	if v == nil {
		return
	}
	return *v, true
}

// OldRate10 returns the old "rate_10" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldRate10(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate10 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate10 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate10: %w", err)
	}
	return oldValue.Rate10, nil
}

// AddRate10 adds u to the "rate_10" field.
func (m *SubjectFieldMutation) AddRate10(u int32) {
	if m.addrate_10 != nil {
		*m.addrate_10 += u
	} else {
		m.addrate_10 = &u
	}
}

// AddedRate10 returns the value that was added to the "rate_10" field in this mutation.
func (m *SubjectFieldMutation) AddedRate10() (r int32, exists bool) {
	v := m.addrate_10
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate10 resets all changes to the "rate_10" field.
func (m *SubjectFieldMutation) ResetRate10() {
	m.rate_10 = nil
	m.addrate_10 = nil
}

// SetAverageScore sets the "average_score" field.
func (m *SubjectFieldMutation) SetAverageScore(f float64) {
	m.average_score = &f
	m.addaverage_score = nil
}

// AverageScore returns the value of the "average_score" field in the mutation.
func (m *SubjectFieldMutation) AverageScore() (r float64, exists bool) {
	v := m.average_score
	if v == nil {
		return
	}
	return *v, true
}

// OldAverageScore returns the old "average_score" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldAverageScore(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAverageScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAverageScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAverageScore: %w", err)
	}
	return oldValue.AverageScore, nil
}

// AddAverageScore adds f to the "average_score" field.
func (m *SubjectFieldMutation) AddAverageScore(f float64) {
	if m.addaverage_score != nil {
		*m.addaverage_score += f
	} else {
		m.addaverage_score = &f
	}
}

// AddedAverageScore returns the value that was added to the "average_score" field in this mutation.
func (m *SubjectFieldMutation) AddedAverageScore() (r float64, exists bool) {
	v := m.addaverage_score
	if v == nil {
		return
	}
	return *v, true
}

// ResetAverageScore resets all changes to the "average_score" field.
func (m *SubjectFieldMutation) ResetAverageScore() {
	m.average_score = nil
	m.addaverage_score = nil
}

// SetRank sets the "rank" field.
func (m *SubjectFieldMutation) SetRank(u uint32) {
	m.rank = &u
	m.addrank = nil
}

// Rank returns the value of the "rank" field in the mutation.
func (m *SubjectFieldMutation) Rank() (r uint32, exists bool) {
	v := m.rank
	if v == nil {
		return
	}
	return *v, true
}

// OldRank returns the old "rank" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldRank(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRank is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRank requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRank: %w", err)
	}
	return oldValue.Rank, nil
}

// AddRank adds u to the "rank" field.
func (m *SubjectFieldMutation) AddRank(u int32) {
	if m.addrank != nil {
		*m.addrank += u
	} else {
		m.addrank = &u
	}
}

// AddedRank returns the value that was added to the "rank" field in this mutation.
func (m *SubjectFieldMutation) AddedRank() (r int32, exists bool) {
	v := m.addrank
	if v == nil {
		return
	}
	return *v, true
}

// ResetRank resets all changes to the "rank" field.
func (m *SubjectFieldMutation) ResetRank() {
	m.rank = nil
	m.addrank = nil
}

// SetYear sets the "year" field.
func (m *SubjectFieldMutation) SetYear(u uint32) {
	m.year = &u
	m.addyear = nil
}

// Year returns the value of the "year" field in the mutation.
func (m *SubjectFieldMutation) Year() (r uint32, exists bool) {
	v := m.year
	if v == nil {
		return
	}
	return *v, true
}

// OldYear returns the old "year" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldYear(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYear: %w", err)
	}
	return oldValue.Year, nil
}

// AddYear adds u to the "year" field.
func (m *SubjectFieldMutation) AddYear(u int32) {
	if m.addyear != nil {
		*m.addyear += u
	} else {
		m.addyear = &u
	}
}

// AddedYear returns the value that was added to the "year" field in this mutation.
func (m *SubjectFieldMutation) AddedYear() (r int32, exists bool) {
	v := m.addyear
	if v == nil {
		return
	}
	return *v, true
}

// ResetYear resets all changes to the "year" field.
func (m *SubjectFieldMutation) ResetYear() {
	m.year = nil
	m.addyear = nil
}

// SetMonth sets the "month" field.
func (m *SubjectFieldMutation) SetMonth(u uint8) {
	m.month = &u
	m.addmonth = nil
}

// Month returns the value of the "month" field in the mutation.
func (m *SubjectFieldMutation) Month() (r uint8, exists bool) {
	v := m.month
	if v == nil {
		return
	}
	return *v, true
}

// OldMonth returns the old "month" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldMonth(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMonth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMonth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMonth: %w", err)
	}
	return oldValue.Month, nil
}

// AddMonth adds u to the "month" field.
func (m *SubjectFieldMutation) AddMonth(u int8) {
	if m.addmonth != nil {
		*m.addmonth += u
	} else {
		m.addmonth = &u
	}
}

// AddedMonth returns the value that was added to the "month" field in this mutation.
func (m *SubjectFieldMutation) AddedMonth() (r int8, exists bool) {
	v := m.addmonth
	if v == nil {
		return
	}
	return *v, true
}

// ResetMonth resets all changes to the "month" field.
func (m *SubjectFieldMutation) ResetMonth() {
	m.month = nil
	m.addmonth = nil
}

// SetDate sets the "date" field.
func (m *SubjectFieldMutation) SetDate(u uint8) {
	m.date = &u
	m.adddate = nil
}

// Date returns the value of the "date" field in the mutation.
func (m *SubjectFieldMutation) Date() (r uint8, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldDate(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// AddDate adds u to the "date" field.
func (m *SubjectFieldMutation) AddDate(u int8) {
	if m.adddate != nil {
		*m.adddate += u
	} else {
		m.adddate = &u
	}
}

// AddedDate returns the value that was added to the "date" field in this mutation.
func (m *SubjectFieldMutation) AddedDate() (r int8, exists bool) {
	v := m.adddate
	if v == nil {
		return
	}
	return *v, true
}

// ResetDate resets all changes to the "date" field.
func (m *SubjectFieldMutation) ResetDate() {
	m.date = nil
	m.adddate = nil
}

// SetWeekday sets the "weekday" field.
func (m *SubjectFieldMutation) SetWeekday(u uint8) {
	m.weekday = &u
	m.addweekday = nil
}

// Weekday returns the value of the "weekday" field in the mutation.
func (m *SubjectFieldMutation) Weekday() (r uint8, exists bool) {
	v := m.weekday
	if v == nil {
		return
	}
	return *v, true
}

// OldWeekday returns the old "weekday" field's value of the SubjectField entity.
// If the SubjectField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubjectFieldMutation) OldWeekday(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeekday is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeekday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeekday: %w", err)
	}
	return oldValue.Weekday, nil
}

// AddWeekday adds u to the "weekday" field.
func (m *SubjectFieldMutation) AddWeekday(u int8) {
	if m.addweekday != nil {
		*m.addweekday += u
	} else {
		m.addweekday = &u
	}
}

// AddedWeekday returns the value that was added to the "weekday" field in this mutation.
func (m *SubjectFieldMutation) AddedWeekday() (r int8, exists bool) {
	v := m.addweekday
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeekday resets all changes to the "weekday" field.
func (m *SubjectFieldMutation) ResetWeekday() {
	m.weekday = nil
	m.addweekday = nil
}

// SetSubjectID sets the "subject" edge to the Subject entity by id.
func (m *SubjectFieldMutation) SetSubjectID(id uint32) {
	m.subject = &id
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (m *SubjectFieldMutation) ClearSubject() {
	m.clearedsubject = true
}

// SubjectCleared reports if the "subject" edge to the Subject entity was cleared.
func (m *SubjectFieldMutation) SubjectCleared() bool {
	return m.clearedsubject
}

// SubjectID returns the "subject" edge ID in the mutation.
func (m *SubjectFieldMutation) SubjectID() (id uint32, exists bool) {
	if m.subject != nil {
		return *m.subject, true
	}
	return
}

// SubjectIDs returns the "subject" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubjectID instead. It exists only for internal usage by the builders.
func (m *SubjectFieldMutation) SubjectIDs() (ids []uint32) {
	if id := m.subject; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubject resets all changes to the "subject" edge.
func (m *SubjectFieldMutation) ResetSubject() {
	m.subject = nil
	m.clearedsubject = false
}

// Where appends a list predicates to the SubjectFieldMutation builder.
func (m *SubjectFieldMutation) Where(ps ...predicate.SubjectField) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubjectFieldMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubjectFieldMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SubjectField, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubjectFieldMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubjectFieldMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SubjectField).
func (m *SubjectFieldMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubjectFieldMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.rate_1 != nil {
		fields = append(fields, subjectfield.FieldRate1)
	}
	if m.rate_2 != nil {
		fields = append(fields, subjectfield.FieldRate2)
	}
	if m.rate_3 != nil {
		fields = append(fields, subjectfield.FieldRate3)
	}
	if m.rate_4 != nil {
		fields = append(fields, subjectfield.FieldRate4)
	}
	if m.rate_5 != nil {
		fields = append(fields, subjectfield.FieldRate5)
	}
	if m.rate_6 != nil {
		fields = append(fields, subjectfield.FieldRate6)
	}
	if m.rate_7 != nil {
		fields = append(fields, subjectfield.FieldRate7)
	}
	if m.rate_8 != nil {
		fields = append(fields, subjectfield.FieldRate8)
	}
	if m.rate_9 != nil {
		fields = append(fields, subjectfield.FieldRate9)
	}
	if m.rate_10 != nil {
		fields = append(fields, subjectfield.FieldRate10)
	}
	if m.average_score != nil {
		fields = append(fields, subjectfield.FieldAverageScore)
	}
	if m.rank != nil {
		fields = append(fields, subjectfield.FieldRank)
	}
	if m.year != nil {
		fields = append(fields, subjectfield.FieldYear)
	}
	if m.month != nil {
		fields = append(fields, subjectfield.FieldMonth)
	}
	if m.date != nil {
		fields = append(fields, subjectfield.FieldDate)
	}
	if m.weekday != nil {
		fields = append(fields, subjectfield.FieldWeekday)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubjectFieldMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subjectfield.FieldRate1:
		return m.Rate1()
	case subjectfield.FieldRate2:
		return m.Rate2()
	case subjectfield.FieldRate3:
		return m.Rate3()
	case subjectfield.FieldRate4:
		return m.Rate4()
	case subjectfield.FieldRate5:
		return m.Rate5()
	case subjectfield.FieldRate6:
		return m.Rate6()
	case subjectfield.FieldRate7:
		return m.Rate7()
	case subjectfield.FieldRate8:
		return m.Rate8()
	case subjectfield.FieldRate9:
		return m.Rate9()
	case subjectfield.FieldRate10:
		return m.Rate10()
	case subjectfield.FieldAverageScore:
		return m.AverageScore()
	case subjectfield.FieldRank:
		return m.Rank()
	case subjectfield.FieldYear:
		return m.Year()
	case subjectfield.FieldMonth:
		return m.Month()
	case subjectfield.FieldDate:
		return m.Date()
	case subjectfield.FieldWeekday:
		return m.Weekday()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubjectFieldMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subjectfield.FieldRate1:
		return m.OldRate1(ctx)
	case subjectfield.FieldRate2:
		return m.OldRate2(ctx)
	case subjectfield.FieldRate3:
		return m.OldRate3(ctx)
	case subjectfield.FieldRate4:
		return m.OldRate4(ctx)
	case subjectfield.FieldRate5:
		return m.OldRate5(ctx)
	case subjectfield.FieldRate6:
		return m.OldRate6(ctx)
	case subjectfield.FieldRate7:
		return m.OldRate7(ctx)
	case subjectfield.FieldRate8:
		return m.OldRate8(ctx)
	case subjectfield.FieldRate9:
		return m.OldRate9(ctx)
	case subjectfield.FieldRate10:
		return m.OldRate10(ctx)
	case subjectfield.FieldAverageScore:
		return m.OldAverageScore(ctx)
	case subjectfield.FieldRank:
		return m.OldRank(ctx)
	case subjectfield.FieldYear:
		return m.OldYear(ctx)
	case subjectfield.FieldMonth:
		return m.OldMonth(ctx)
	case subjectfield.FieldDate:
		return m.OldDate(ctx)
	case subjectfield.FieldWeekday:
		return m.OldWeekday(ctx)
	}
	return nil, fmt.Errorf("unknown SubjectField field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubjectFieldMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subjectfield.FieldRate1:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate1(v)
		return nil
	case subjectfield.FieldRate2:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate2(v)
		return nil
	case subjectfield.FieldRate3:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate3(v)
		return nil
	case subjectfield.FieldRate4:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate4(v)
		return nil
	case subjectfield.FieldRate5:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate5(v)
		return nil
	case subjectfield.FieldRate6:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate6(v)
		return nil
	case subjectfield.FieldRate7:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate7(v)
		return nil
	case subjectfield.FieldRate8:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate8(v)
		return nil
	case subjectfield.FieldRate9:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate9(v)
		return nil
	case subjectfield.FieldRate10:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate10(v)
		return nil
	case subjectfield.FieldAverageScore:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAverageScore(v)
		return nil
	case subjectfield.FieldRank:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRank(v)
		return nil
	case subjectfield.FieldYear:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYear(v)
		return nil
	case subjectfield.FieldMonth:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMonth(v)
		return nil
	case subjectfield.FieldDate:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case subjectfield.FieldWeekday:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeekday(v)
		return nil
	}
	return fmt.Errorf("unknown SubjectField field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubjectFieldMutation) AddedFields() []string {
	var fields []string
	if m.addrate_1 != nil {
		fields = append(fields, subjectfield.FieldRate1)
	}
	if m.addrate_2 != nil {
		fields = append(fields, subjectfield.FieldRate2)
	}
	if m.addrate_3 != nil {
		fields = append(fields, subjectfield.FieldRate3)
	}
	if m.addrate_4 != nil {
		fields = append(fields, subjectfield.FieldRate4)
	}
	if m.addrate_5 != nil {
		fields = append(fields, subjectfield.FieldRate5)
	}
	if m.addrate_6 != nil {
		fields = append(fields, subjectfield.FieldRate6)
	}
	if m.addrate_7 != nil {
		fields = append(fields, subjectfield.FieldRate7)
	}
	if m.addrate_8 != nil {
		fields = append(fields, subjectfield.FieldRate8)
	}
	if m.addrate_9 != nil {
		fields = append(fields, subjectfield.FieldRate9)
	}
	if m.addrate_10 != nil {
		fields = append(fields, subjectfield.FieldRate10)
	}
	if m.addaverage_score != nil {
		fields = append(fields, subjectfield.FieldAverageScore)
	}
	if m.addrank != nil {
		fields = append(fields, subjectfield.FieldRank)
	}
	if m.addyear != nil {
		fields = append(fields, subjectfield.FieldYear)
	}
	if m.addmonth != nil {
		fields = append(fields, subjectfield.FieldMonth)
	}
	if m.adddate != nil {
		fields = append(fields, subjectfield.FieldDate)
	}
	if m.addweekday != nil {
		fields = append(fields, subjectfield.FieldWeekday)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubjectFieldMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subjectfield.FieldRate1:
		return m.AddedRate1()
	case subjectfield.FieldRate2:
		return m.AddedRate2()
	case subjectfield.FieldRate3:
		return m.AddedRate3()
	case subjectfield.FieldRate4:
		return m.AddedRate4()
	case subjectfield.FieldRate5:
		return m.AddedRate5()
	case subjectfield.FieldRate6:
		return m.AddedRate6()
	case subjectfield.FieldRate7:
		return m.AddedRate7()
	case subjectfield.FieldRate8:
		return m.AddedRate8()
	case subjectfield.FieldRate9:
		return m.AddedRate9()
	case subjectfield.FieldRate10:
		return m.AddedRate10()
	case subjectfield.FieldAverageScore:
		return m.AddedAverageScore()
	case subjectfield.FieldRank:
		return m.AddedRank()
	case subjectfield.FieldYear:
		return m.AddedYear()
	case subjectfield.FieldMonth:
		return m.AddedMonth()
	case subjectfield.FieldDate:
		return m.AddedDate()
	case subjectfield.FieldWeekday:
		return m.AddedWeekday()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubjectFieldMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subjectfield.FieldRate1:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate1(v)
		return nil
	case subjectfield.FieldRate2:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate2(v)
		return nil
	case subjectfield.FieldRate3:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate3(v)
		return nil
	case subjectfield.FieldRate4:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate4(v)
		return nil
	case subjectfield.FieldRate5:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate5(v)
		return nil
	case subjectfield.FieldRate6:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate6(v)
		return nil
	case subjectfield.FieldRate7:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate7(v)
		return nil
	case subjectfield.FieldRate8:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate8(v)
		return nil
	case subjectfield.FieldRate9:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate9(v)
		return nil
	case subjectfield.FieldRate10:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate10(v)
		return nil
	case subjectfield.FieldAverageScore:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAverageScore(v)
		return nil
	case subjectfield.FieldRank:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRank(v)
		return nil
	case subjectfield.FieldYear:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYear(v)
		return nil
	case subjectfield.FieldMonth:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMonth(v)
		return nil
	case subjectfield.FieldDate:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDate(v)
		return nil
	case subjectfield.FieldWeekday:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeekday(v)
		return nil
	}
	return fmt.Errorf("unknown SubjectField numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubjectFieldMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubjectFieldMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubjectFieldMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SubjectField nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubjectFieldMutation) ResetField(name string) error {
	switch name {
	case subjectfield.FieldRate1:
		m.ResetRate1()
		return nil
	case subjectfield.FieldRate2:
		m.ResetRate2()
		return nil
	case subjectfield.FieldRate3:
		m.ResetRate3()
		return nil
	case subjectfield.FieldRate4:
		m.ResetRate4()
		return nil
	case subjectfield.FieldRate5:
		m.ResetRate5()
		return nil
	case subjectfield.FieldRate6:
		m.ResetRate6()
		return nil
	case subjectfield.FieldRate7:
		m.ResetRate7()
		return nil
	case subjectfield.FieldRate8:
		m.ResetRate8()
		return nil
	case subjectfield.FieldRate9:
		m.ResetRate9()
		return nil
	case subjectfield.FieldRate10:
		m.ResetRate10()
		return nil
	case subjectfield.FieldAverageScore:
		m.ResetAverageScore()
		return nil
	case subjectfield.FieldRank:
		m.ResetRank()
		return nil
	case subjectfield.FieldYear:
		m.ResetYear()
		return nil
	case subjectfield.FieldMonth:
		m.ResetMonth()
		return nil
	case subjectfield.FieldDate:
		m.ResetDate()
		return nil
	case subjectfield.FieldWeekday:
		m.ResetWeekday()
		return nil
	}
	return fmt.Errorf("unknown SubjectField field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubjectFieldMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.subject != nil {
		edges = append(edges, subjectfield.EdgeSubject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubjectFieldMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subjectfield.EdgeSubject:
		if id := m.subject; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubjectFieldMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubjectFieldMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubjectFieldMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsubject {
		edges = append(edges, subjectfield.EdgeSubject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubjectFieldMutation) EdgeCleared(name string) bool {
	switch name {
	case subjectfield.EdgeSubject:
		return m.clearedsubject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubjectFieldMutation) ClearEdge(name string) error {
	switch name {
	case subjectfield.EdgeSubject:
		m.ClearSubject()
		return nil
	}
	return fmt.Errorf("unknown SubjectField unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubjectFieldMutation) ResetEdge(name string) error {
	switch name {
	case subjectfield.EdgeSubject:
		m.ResetSubject()
		return nil
	}
	return fmt.Errorf("unknown SubjectField edge %s", name)
}
