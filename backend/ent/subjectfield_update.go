// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/subject"
	"backend/ent/subjectfield"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubjectFieldUpdate is the builder for updating SubjectField entities.
type SubjectFieldUpdate struct {
	config
	hooks    []Hook
	mutation *SubjectFieldMutation
}

// Where appends a list predicates to the SubjectFieldUpdate builder.
func (sfu *SubjectFieldUpdate) Where(ps ...predicate.SubjectField) *SubjectFieldUpdate {
	sfu.mutation.Where(ps...)
	return sfu
}

// SetRate1 sets the "rate_1" field.
func (sfu *SubjectFieldUpdate) SetRate1(u uint32) *SubjectFieldUpdate {
	sfu.mutation.ResetRate1()
	sfu.mutation.SetRate1(u)
	return sfu
}

// SetNillableRate1 sets the "rate_1" field if the given value is not nil.
func (sfu *SubjectFieldUpdate) SetNillableRate1(u *uint32) *SubjectFieldUpdate {
	if u != nil {
		sfu.SetRate1(*u)
	}
	return sfu
}

// AddRate1 adds u to the "rate_1" field.
func (sfu *SubjectFieldUpdate) AddRate1(u int32) *SubjectFieldUpdate {
	sfu.mutation.AddRate1(u)
	return sfu
}

// SetRate2 sets the "rate_2" field.
func (sfu *SubjectFieldUpdate) SetRate2(u uint32) *SubjectFieldUpdate {
	sfu.mutation.ResetRate2()
	sfu.mutation.SetRate2(u)
	return sfu
}

// SetNillableRate2 sets the "rate_2" field if the given value is not nil.
func (sfu *SubjectFieldUpdate) SetNillableRate2(u *uint32) *SubjectFieldUpdate {
	if u != nil {
		sfu.SetRate2(*u)
	}
	return sfu
}

// AddRate2 adds u to the "rate_2" field.
func (sfu *SubjectFieldUpdate) AddRate2(u int32) *SubjectFieldUpdate {
	sfu.mutation.AddRate2(u)
	return sfu
}

// SetRate3 sets the "rate_3" field.
func (sfu *SubjectFieldUpdate) SetRate3(u uint32) *SubjectFieldUpdate {
	sfu.mutation.ResetRate3()
	sfu.mutation.SetRate3(u)
	return sfu
}

// SetNillableRate3 sets the "rate_3" field if the given value is not nil.
func (sfu *SubjectFieldUpdate) SetNillableRate3(u *uint32) *SubjectFieldUpdate {
	if u != nil {
		sfu.SetRate3(*u)
	}
	return sfu
}

// AddRate3 adds u to the "rate_3" field.
func (sfu *SubjectFieldUpdate) AddRate3(u int32) *SubjectFieldUpdate {
	sfu.mutation.AddRate3(u)
	return sfu
}

// SetRate4 sets the "rate_4" field.
func (sfu *SubjectFieldUpdate) SetRate4(u uint32) *SubjectFieldUpdate {
	sfu.mutation.ResetRate4()
	sfu.mutation.SetRate4(u)
	return sfu
}

// SetNillableRate4 sets the "rate_4" field if the given value is not nil.
func (sfu *SubjectFieldUpdate) SetNillableRate4(u *uint32) *SubjectFieldUpdate {
	if u != nil {
		sfu.SetRate4(*u)
	}
	return sfu
}

// AddRate4 adds u to the "rate_4" field.
func (sfu *SubjectFieldUpdate) AddRate4(u int32) *SubjectFieldUpdate {
	sfu.mutation.AddRate4(u)
	return sfu
}

// SetRate5 sets the "rate_5" field.
func (sfu *SubjectFieldUpdate) SetRate5(u uint32) *SubjectFieldUpdate {
	sfu.mutation.ResetRate5()
	sfu.mutation.SetRate5(u)
	return sfu
}

// SetNillableRate5 sets the "rate_5" field if the given value is not nil.
func (sfu *SubjectFieldUpdate) SetNillableRate5(u *uint32) *SubjectFieldUpdate {
	if u != nil {
		sfu.SetRate5(*u)
	}
	return sfu
}

// AddRate5 adds u to the "rate_5" field.
func (sfu *SubjectFieldUpdate) AddRate5(u int32) *SubjectFieldUpdate {
	sfu.mutation.AddRate5(u)
	return sfu
}

// SetRate6 sets the "rate_6" field.
func (sfu *SubjectFieldUpdate) SetRate6(u uint32) *SubjectFieldUpdate {
	sfu.mutation.ResetRate6()
	sfu.mutation.SetRate6(u)
	return sfu
}

// SetNillableRate6 sets the "rate_6" field if the given value is not nil.
func (sfu *SubjectFieldUpdate) SetNillableRate6(u *uint32) *SubjectFieldUpdate {
	if u != nil {
		sfu.SetRate6(*u)
	}
	return sfu
}

// AddRate6 adds u to the "rate_6" field.
func (sfu *SubjectFieldUpdate) AddRate6(u int32) *SubjectFieldUpdate {
	sfu.mutation.AddRate6(u)
	return sfu
}

// SetRate7 sets the "rate_7" field.
func (sfu *SubjectFieldUpdate) SetRate7(u uint32) *SubjectFieldUpdate {
	sfu.mutation.ResetRate7()
	sfu.mutation.SetRate7(u)
	return sfu
}

// SetNillableRate7 sets the "rate_7" field if the given value is not nil.
func (sfu *SubjectFieldUpdate) SetNillableRate7(u *uint32) *SubjectFieldUpdate {
	if u != nil {
		sfu.SetRate7(*u)
	}
	return sfu
}

// AddRate7 adds u to the "rate_7" field.
func (sfu *SubjectFieldUpdate) AddRate7(u int32) *SubjectFieldUpdate {
	sfu.mutation.AddRate7(u)
	return sfu
}

// SetRate8 sets the "rate_8" field.
func (sfu *SubjectFieldUpdate) SetRate8(u uint32) *SubjectFieldUpdate {
	sfu.mutation.ResetRate8()
	sfu.mutation.SetRate8(u)
	return sfu
}

// SetNillableRate8 sets the "rate_8" field if the given value is not nil.
func (sfu *SubjectFieldUpdate) SetNillableRate8(u *uint32) *SubjectFieldUpdate {
	if u != nil {
		sfu.SetRate8(*u)
	}
	return sfu
}

// AddRate8 adds u to the "rate_8" field.
func (sfu *SubjectFieldUpdate) AddRate8(u int32) *SubjectFieldUpdate {
	sfu.mutation.AddRate8(u)
	return sfu
}

// SetRate9 sets the "rate_9" field.
func (sfu *SubjectFieldUpdate) SetRate9(u uint32) *SubjectFieldUpdate {
	sfu.mutation.ResetRate9()
	sfu.mutation.SetRate9(u)
	return sfu
}

// SetNillableRate9 sets the "rate_9" field if the given value is not nil.
func (sfu *SubjectFieldUpdate) SetNillableRate9(u *uint32) *SubjectFieldUpdate {
	if u != nil {
		sfu.SetRate9(*u)
	}
	return sfu
}

// AddRate9 adds u to the "rate_9" field.
func (sfu *SubjectFieldUpdate) AddRate9(u int32) *SubjectFieldUpdate {
	sfu.mutation.AddRate9(u)
	return sfu
}

// SetRate10 sets the "rate_10" field.
func (sfu *SubjectFieldUpdate) SetRate10(u uint32) *SubjectFieldUpdate {
	sfu.mutation.ResetRate10()
	sfu.mutation.SetRate10(u)
	return sfu
}

// SetNillableRate10 sets the "rate_10" field if the given value is not nil.
func (sfu *SubjectFieldUpdate) SetNillableRate10(u *uint32) *SubjectFieldUpdate {
	if u != nil {
		sfu.SetRate10(*u)
	}
	return sfu
}

// AddRate10 adds u to the "rate_10" field.
func (sfu *SubjectFieldUpdate) AddRate10(u int32) *SubjectFieldUpdate {
	sfu.mutation.AddRate10(u)
	return sfu
}

// SetAverageScore sets the "average_score" field.
func (sfu *SubjectFieldUpdate) SetAverageScore(f float64) *SubjectFieldUpdate {
	sfu.mutation.ResetAverageScore()
	sfu.mutation.SetAverageScore(f)
	return sfu
}

// SetNillableAverageScore sets the "average_score" field if the given value is not nil.
func (sfu *SubjectFieldUpdate) SetNillableAverageScore(f *float64) *SubjectFieldUpdate {
	if f != nil {
		sfu.SetAverageScore(*f)
	}
	return sfu
}

// AddAverageScore adds f to the "average_score" field.
func (sfu *SubjectFieldUpdate) AddAverageScore(f float64) *SubjectFieldUpdate {
	sfu.mutation.AddAverageScore(f)
	return sfu
}

// SetRank sets the "rank" field.
func (sfu *SubjectFieldUpdate) SetRank(u uint32) *SubjectFieldUpdate {
	sfu.mutation.ResetRank()
	sfu.mutation.SetRank(u)
	return sfu
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (sfu *SubjectFieldUpdate) SetNillableRank(u *uint32) *SubjectFieldUpdate {
	if u != nil {
		sfu.SetRank(*u)
	}
	return sfu
}

// AddRank adds u to the "rank" field.
func (sfu *SubjectFieldUpdate) AddRank(u int32) *SubjectFieldUpdate {
	sfu.mutation.AddRank(u)
	return sfu
}

// SetYear sets the "year" field.
func (sfu *SubjectFieldUpdate) SetYear(u uint32) *SubjectFieldUpdate {
	sfu.mutation.ResetYear()
	sfu.mutation.SetYear(u)
	return sfu
}

// AddYear adds u to the "year" field.
func (sfu *SubjectFieldUpdate) AddYear(u int32) *SubjectFieldUpdate {
	sfu.mutation.AddYear(u)
	return sfu
}

// SetMonth sets the "month" field.
func (sfu *SubjectFieldUpdate) SetMonth(u uint8) *SubjectFieldUpdate {
	sfu.mutation.ResetMonth()
	sfu.mutation.SetMonth(u)
	return sfu
}

// AddMonth adds u to the "month" field.
func (sfu *SubjectFieldUpdate) AddMonth(u int8) *SubjectFieldUpdate {
	sfu.mutation.AddMonth(u)
	return sfu
}

// SetDate sets the "date" field.
func (sfu *SubjectFieldUpdate) SetDate(u uint8) *SubjectFieldUpdate {
	sfu.mutation.ResetDate()
	sfu.mutation.SetDate(u)
	return sfu
}

// AddDate adds u to the "date" field.
func (sfu *SubjectFieldUpdate) AddDate(u int8) *SubjectFieldUpdate {
	sfu.mutation.AddDate(u)
	return sfu
}

// SetWeekday sets the "weekday" field.
func (sfu *SubjectFieldUpdate) SetWeekday(u uint8) *SubjectFieldUpdate {
	sfu.mutation.ResetWeekday()
	sfu.mutation.SetWeekday(u)
	return sfu
}

// AddWeekday adds u to the "weekday" field.
func (sfu *SubjectFieldUpdate) AddWeekday(u int8) *SubjectFieldUpdate {
	sfu.mutation.AddWeekday(u)
	return sfu
}

// SetSubjectID sets the "subject" edge to the Subject entity by ID.
func (sfu *SubjectFieldUpdate) SetSubjectID(id uint32) *SubjectFieldUpdate {
	sfu.mutation.SetSubjectID(id)
	return sfu
}

// SetNillableSubjectID sets the "subject" edge to the Subject entity by ID if the given value is not nil.
func (sfu *SubjectFieldUpdate) SetNillableSubjectID(id *uint32) *SubjectFieldUpdate {
	if id != nil {
		sfu = sfu.SetSubjectID(*id)
	}
	return sfu
}

// SetSubject sets the "subject" edge to the Subject entity.
func (sfu *SubjectFieldUpdate) SetSubject(s *Subject) *SubjectFieldUpdate {
	return sfu.SetSubjectID(s.ID)
}

// Mutation returns the SubjectFieldMutation object of the builder.
func (sfu *SubjectFieldUpdate) Mutation() *SubjectFieldMutation {
	return sfu.mutation
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (sfu *SubjectFieldUpdate) ClearSubject() *SubjectFieldUpdate {
	sfu.mutation.ClearSubject()
	return sfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sfu *SubjectFieldUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sfu.sqlSave, sfu.mutation, sfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfu *SubjectFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := sfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sfu *SubjectFieldUpdate) Exec(ctx context.Context) error {
	_, err := sfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfu *SubjectFieldUpdate) ExecX(ctx context.Context) {
	if err := sfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfu *SubjectFieldUpdate) check() error {
	if v, ok := sfu.mutation.AverageScore(); ok {
		if err := subjectfield.AverageScoreValidator(v); err != nil {
			return &ValidationError{Name: "average_score", err: fmt.Errorf(`ent: validator failed for field "SubjectField.average_score": %w`, err)}
		}
	}
	if v, ok := sfu.mutation.Month(); ok {
		if err := subjectfield.MonthValidator(v); err != nil {
			return &ValidationError{Name: "month", err: fmt.Errorf(`ent: validator failed for field "SubjectField.month": %w`, err)}
		}
	}
	if v, ok := sfu.mutation.Date(); ok {
		if err := subjectfield.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`ent: validator failed for field "SubjectField.date": %w`, err)}
		}
	}
	if v, ok := sfu.mutation.Weekday(); ok {
		if err := subjectfield.WeekdayValidator(v); err != nil {
			return &ValidationError{Name: "weekday", err: fmt.Errorf(`ent: validator failed for field "SubjectField.weekday": %w`, err)}
		}
	}
	return nil
}

func (sfu *SubjectFieldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subjectfield.Table, subjectfield.Columns, sqlgraph.NewFieldSpec(subjectfield.FieldID, field.TypeInt))
	if ps := sfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfu.mutation.Rate1(); ok {
		_spec.SetField(subjectfield.FieldRate1, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.AddedRate1(); ok {
		_spec.AddField(subjectfield.FieldRate1, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.Rate2(); ok {
		_spec.SetField(subjectfield.FieldRate2, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.AddedRate2(); ok {
		_spec.AddField(subjectfield.FieldRate2, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.Rate3(); ok {
		_spec.SetField(subjectfield.FieldRate3, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.AddedRate3(); ok {
		_spec.AddField(subjectfield.FieldRate3, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.Rate4(); ok {
		_spec.SetField(subjectfield.FieldRate4, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.AddedRate4(); ok {
		_spec.AddField(subjectfield.FieldRate4, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.Rate5(); ok {
		_spec.SetField(subjectfield.FieldRate5, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.AddedRate5(); ok {
		_spec.AddField(subjectfield.FieldRate5, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.Rate6(); ok {
		_spec.SetField(subjectfield.FieldRate6, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.AddedRate6(); ok {
		_spec.AddField(subjectfield.FieldRate6, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.Rate7(); ok {
		_spec.SetField(subjectfield.FieldRate7, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.AddedRate7(); ok {
		_spec.AddField(subjectfield.FieldRate7, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.Rate8(); ok {
		_spec.SetField(subjectfield.FieldRate8, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.AddedRate8(); ok {
		_spec.AddField(subjectfield.FieldRate8, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.Rate9(); ok {
		_spec.SetField(subjectfield.FieldRate9, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.AddedRate9(); ok {
		_spec.AddField(subjectfield.FieldRate9, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.Rate10(); ok {
		_spec.SetField(subjectfield.FieldRate10, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.AddedRate10(); ok {
		_spec.AddField(subjectfield.FieldRate10, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.AverageScore(); ok {
		_spec.SetField(subjectfield.FieldAverageScore, field.TypeFloat64, value)
	}
	if value, ok := sfu.mutation.AddedAverageScore(); ok {
		_spec.AddField(subjectfield.FieldAverageScore, field.TypeFloat64, value)
	}
	if value, ok := sfu.mutation.Rank(); ok {
		_spec.SetField(subjectfield.FieldRank, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.AddedRank(); ok {
		_spec.AddField(subjectfield.FieldRank, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.Year(); ok {
		_spec.SetField(subjectfield.FieldYear, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.AddedYear(); ok {
		_spec.AddField(subjectfield.FieldYear, field.TypeUint32, value)
	}
	if value, ok := sfu.mutation.Month(); ok {
		_spec.SetField(subjectfield.FieldMonth, field.TypeUint8, value)
	}
	if value, ok := sfu.mutation.AddedMonth(); ok {
		_spec.AddField(subjectfield.FieldMonth, field.TypeUint8, value)
	}
	if value, ok := sfu.mutation.Date(); ok {
		_spec.SetField(subjectfield.FieldDate, field.TypeUint8, value)
	}
	if value, ok := sfu.mutation.AddedDate(); ok {
		_spec.AddField(subjectfield.FieldDate, field.TypeUint8, value)
	}
	if value, ok := sfu.mutation.Weekday(); ok {
		_spec.SetField(subjectfield.FieldWeekday, field.TypeUint8, value)
	}
	if value, ok := sfu.mutation.AddedWeekday(); ok {
		_spec.AddField(subjectfield.FieldWeekday, field.TypeUint8, value)
	}
	if sfu.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subjectfield.SubjectTable,
			Columns: []string{subjectfield.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sfu.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subjectfield.SubjectTable,
			Columns: []string{subjectfield.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subjectfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sfu.mutation.done = true
	return n, nil
}

// SubjectFieldUpdateOne is the builder for updating a single SubjectField entity.
type SubjectFieldUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubjectFieldMutation
}

// SetRate1 sets the "rate_1" field.
func (sfuo *SubjectFieldUpdateOne) SetRate1(u uint32) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetRate1()
	sfuo.mutation.SetRate1(u)
	return sfuo
}

// SetNillableRate1 sets the "rate_1" field if the given value is not nil.
func (sfuo *SubjectFieldUpdateOne) SetNillableRate1(u *uint32) *SubjectFieldUpdateOne {
	if u != nil {
		sfuo.SetRate1(*u)
	}
	return sfuo
}

// AddRate1 adds u to the "rate_1" field.
func (sfuo *SubjectFieldUpdateOne) AddRate1(u int32) *SubjectFieldUpdateOne {
	sfuo.mutation.AddRate1(u)
	return sfuo
}

// SetRate2 sets the "rate_2" field.
func (sfuo *SubjectFieldUpdateOne) SetRate2(u uint32) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetRate2()
	sfuo.mutation.SetRate2(u)
	return sfuo
}

// SetNillableRate2 sets the "rate_2" field if the given value is not nil.
func (sfuo *SubjectFieldUpdateOne) SetNillableRate2(u *uint32) *SubjectFieldUpdateOne {
	if u != nil {
		sfuo.SetRate2(*u)
	}
	return sfuo
}

// AddRate2 adds u to the "rate_2" field.
func (sfuo *SubjectFieldUpdateOne) AddRate2(u int32) *SubjectFieldUpdateOne {
	sfuo.mutation.AddRate2(u)
	return sfuo
}

// SetRate3 sets the "rate_3" field.
func (sfuo *SubjectFieldUpdateOne) SetRate3(u uint32) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetRate3()
	sfuo.mutation.SetRate3(u)
	return sfuo
}

// SetNillableRate3 sets the "rate_3" field if the given value is not nil.
func (sfuo *SubjectFieldUpdateOne) SetNillableRate3(u *uint32) *SubjectFieldUpdateOne {
	if u != nil {
		sfuo.SetRate3(*u)
	}
	return sfuo
}

// AddRate3 adds u to the "rate_3" field.
func (sfuo *SubjectFieldUpdateOne) AddRate3(u int32) *SubjectFieldUpdateOne {
	sfuo.mutation.AddRate3(u)
	return sfuo
}

// SetRate4 sets the "rate_4" field.
func (sfuo *SubjectFieldUpdateOne) SetRate4(u uint32) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetRate4()
	sfuo.mutation.SetRate4(u)
	return sfuo
}

// SetNillableRate4 sets the "rate_4" field if the given value is not nil.
func (sfuo *SubjectFieldUpdateOne) SetNillableRate4(u *uint32) *SubjectFieldUpdateOne {
	if u != nil {
		sfuo.SetRate4(*u)
	}
	return sfuo
}

// AddRate4 adds u to the "rate_4" field.
func (sfuo *SubjectFieldUpdateOne) AddRate4(u int32) *SubjectFieldUpdateOne {
	sfuo.mutation.AddRate4(u)
	return sfuo
}

// SetRate5 sets the "rate_5" field.
func (sfuo *SubjectFieldUpdateOne) SetRate5(u uint32) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetRate5()
	sfuo.mutation.SetRate5(u)
	return sfuo
}

// SetNillableRate5 sets the "rate_5" field if the given value is not nil.
func (sfuo *SubjectFieldUpdateOne) SetNillableRate5(u *uint32) *SubjectFieldUpdateOne {
	if u != nil {
		sfuo.SetRate5(*u)
	}
	return sfuo
}

// AddRate5 adds u to the "rate_5" field.
func (sfuo *SubjectFieldUpdateOne) AddRate5(u int32) *SubjectFieldUpdateOne {
	sfuo.mutation.AddRate5(u)
	return sfuo
}

// SetRate6 sets the "rate_6" field.
func (sfuo *SubjectFieldUpdateOne) SetRate6(u uint32) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetRate6()
	sfuo.mutation.SetRate6(u)
	return sfuo
}

// SetNillableRate6 sets the "rate_6" field if the given value is not nil.
func (sfuo *SubjectFieldUpdateOne) SetNillableRate6(u *uint32) *SubjectFieldUpdateOne {
	if u != nil {
		sfuo.SetRate6(*u)
	}
	return sfuo
}

// AddRate6 adds u to the "rate_6" field.
func (sfuo *SubjectFieldUpdateOne) AddRate6(u int32) *SubjectFieldUpdateOne {
	sfuo.mutation.AddRate6(u)
	return sfuo
}

// SetRate7 sets the "rate_7" field.
func (sfuo *SubjectFieldUpdateOne) SetRate7(u uint32) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetRate7()
	sfuo.mutation.SetRate7(u)
	return sfuo
}

// SetNillableRate7 sets the "rate_7" field if the given value is not nil.
func (sfuo *SubjectFieldUpdateOne) SetNillableRate7(u *uint32) *SubjectFieldUpdateOne {
	if u != nil {
		sfuo.SetRate7(*u)
	}
	return sfuo
}

// AddRate7 adds u to the "rate_7" field.
func (sfuo *SubjectFieldUpdateOne) AddRate7(u int32) *SubjectFieldUpdateOne {
	sfuo.mutation.AddRate7(u)
	return sfuo
}

// SetRate8 sets the "rate_8" field.
func (sfuo *SubjectFieldUpdateOne) SetRate8(u uint32) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetRate8()
	sfuo.mutation.SetRate8(u)
	return sfuo
}

// SetNillableRate8 sets the "rate_8" field if the given value is not nil.
func (sfuo *SubjectFieldUpdateOne) SetNillableRate8(u *uint32) *SubjectFieldUpdateOne {
	if u != nil {
		sfuo.SetRate8(*u)
	}
	return sfuo
}

// AddRate8 adds u to the "rate_8" field.
func (sfuo *SubjectFieldUpdateOne) AddRate8(u int32) *SubjectFieldUpdateOne {
	sfuo.mutation.AddRate8(u)
	return sfuo
}

// SetRate9 sets the "rate_9" field.
func (sfuo *SubjectFieldUpdateOne) SetRate9(u uint32) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetRate9()
	sfuo.mutation.SetRate9(u)
	return sfuo
}

// SetNillableRate9 sets the "rate_9" field if the given value is not nil.
func (sfuo *SubjectFieldUpdateOne) SetNillableRate9(u *uint32) *SubjectFieldUpdateOne {
	if u != nil {
		sfuo.SetRate9(*u)
	}
	return sfuo
}

// AddRate9 adds u to the "rate_9" field.
func (sfuo *SubjectFieldUpdateOne) AddRate9(u int32) *SubjectFieldUpdateOne {
	sfuo.mutation.AddRate9(u)
	return sfuo
}

// SetRate10 sets the "rate_10" field.
func (sfuo *SubjectFieldUpdateOne) SetRate10(u uint32) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetRate10()
	sfuo.mutation.SetRate10(u)
	return sfuo
}

// SetNillableRate10 sets the "rate_10" field if the given value is not nil.
func (sfuo *SubjectFieldUpdateOne) SetNillableRate10(u *uint32) *SubjectFieldUpdateOne {
	if u != nil {
		sfuo.SetRate10(*u)
	}
	return sfuo
}

// AddRate10 adds u to the "rate_10" field.
func (sfuo *SubjectFieldUpdateOne) AddRate10(u int32) *SubjectFieldUpdateOne {
	sfuo.mutation.AddRate10(u)
	return sfuo
}

// SetAverageScore sets the "average_score" field.
func (sfuo *SubjectFieldUpdateOne) SetAverageScore(f float64) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetAverageScore()
	sfuo.mutation.SetAverageScore(f)
	return sfuo
}

// SetNillableAverageScore sets the "average_score" field if the given value is not nil.
func (sfuo *SubjectFieldUpdateOne) SetNillableAverageScore(f *float64) *SubjectFieldUpdateOne {
	if f != nil {
		sfuo.SetAverageScore(*f)
	}
	return sfuo
}

// AddAverageScore adds f to the "average_score" field.
func (sfuo *SubjectFieldUpdateOne) AddAverageScore(f float64) *SubjectFieldUpdateOne {
	sfuo.mutation.AddAverageScore(f)
	return sfuo
}

// SetRank sets the "rank" field.
func (sfuo *SubjectFieldUpdateOne) SetRank(u uint32) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetRank()
	sfuo.mutation.SetRank(u)
	return sfuo
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (sfuo *SubjectFieldUpdateOne) SetNillableRank(u *uint32) *SubjectFieldUpdateOne {
	if u != nil {
		sfuo.SetRank(*u)
	}
	return sfuo
}

// AddRank adds u to the "rank" field.
func (sfuo *SubjectFieldUpdateOne) AddRank(u int32) *SubjectFieldUpdateOne {
	sfuo.mutation.AddRank(u)
	return sfuo
}

// SetYear sets the "year" field.
func (sfuo *SubjectFieldUpdateOne) SetYear(u uint32) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetYear()
	sfuo.mutation.SetYear(u)
	return sfuo
}

// AddYear adds u to the "year" field.
func (sfuo *SubjectFieldUpdateOne) AddYear(u int32) *SubjectFieldUpdateOne {
	sfuo.mutation.AddYear(u)
	return sfuo
}

// SetMonth sets the "month" field.
func (sfuo *SubjectFieldUpdateOne) SetMonth(u uint8) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetMonth()
	sfuo.mutation.SetMonth(u)
	return sfuo
}

// AddMonth adds u to the "month" field.
func (sfuo *SubjectFieldUpdateOne) AddMonth(u int8) *SubjectFieldUpdateOne {
	sfuo.mutation.AddMonth(u)
	return sfuo
}

// SetDate sets the "date" field.
func (sfuo *SubjectFieldUpdateOne) SetDate(u uint8) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetDate()
	sfuo.mutation.SetDate(u)
	return sfuo
}

// AddDate adds u to the "date" field.
func (sfuo *SubjectFieldUpdateOne) AddDate(u int8) *SubjectFieldUpdateOne {
	sfuo.mutation.AddDate(u)
	return sfuo
}

// SetWeekday sets the "weekday" field.
func (sfuo *SubjectFieldUpdateOne) SetWeekday(u uint8) *SubjectFieldUpdateOne {
	sfuo.mutation.ResetWeekday()
	sfuo.mutation.SetWeekday(u)
	return sfuo
}

// AddWeekday adds u to the "weekday" field.
func (sfuo *SubjectFieldUpdateOne) AddWeekday(u int8) *SubjectFieldUpdateOne {
	sfuo.mutation.AddWeekday(u)
	return sfuo
}

// SetSubjectID sets the "subject" edge to the Subject entity by ID.
func (sfuo *SubjectFieldUpdateOne) SetSubjectID(id uint32) *SubjectFieldUpdateOne {
	sfuo.mutation.SetSubjectID(id)
	return sfuo
}

// SetNillableSubjectID sets the "subject" edge to the Subject entity by ID if the given value is not nil.
func (sfuo *SubjectFieldUpdateOne) SetNillableSubjectID(id *uint32) *SubjectFieldUpdateOne {
	if id != nil {
		sfuo = sfuo.SetSubjectID(*id)
	}
	return sfuo
}

// SetSubject sets the "subject" edge to the Subject entity.
func (sfuo *SubjectFieldUpdateOne) SetSubject(s *Subject) *SubjectFieldUpdateOne {
	return sfuo.SetSubjectID(s.ID)
}

// Mutation returns the SubjectFieldMutation object of the builder.
func (sfuo *SubjectFieldUpdateOne) Mutation() *SubjectFieldMutation {
	return sfuo.mutation
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (sfuo *SubjectFieldUpdateOne) ClearSubject() *SubjectFieldUpdateOne {
	sfuo.mutation.ClearSubject()
	return sfuo
}

// Where appends a list predicates to the SubjectFieldUpdate builder.
func (sfuo *SubjectFieldUpdateOne) Where(ps ...predicate.SubjectField) *SubjectFieldUpdateOne {
	sfuo.mutation.Where(ps...)
	return sfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sfuo *SubjectFieldUpdateOne) Select(field string, fields ...string) *SubjectFieldUpdateOne {
	sfuo.fields = append([]string{field}, fields...)
	return sfuo
}

// Save executes the query and returns the updated SubjectField entity.
func (sfuo *SubjectFieldUpdateOne) Save(ctx context.Context) (*SubjectField, error) {
	return withHooks(ctx, sfuo.sqlSave, sfuo.mutation, sfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfuo *SubjectFieldUpdateOne) SaveX(ctx context.Context) *SubjectField {
	node, err := sfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sfuo *SubjectFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := sfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfuo *SubjectFieldUpdateOne) ExecX(ctx context.Context) {
	if err := sfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfuo *SubjectFieldUpdateOne) check() error {
	if v, ok := sfuo.mutation.AverageScore(); ok {
		if err := subjectfield.AverageScoreValidator(v); err != nil {
			return &ValidationError{Name: "average_score", err: fmt.Errorf(`ent: validator failed for field "SubjectField.average_score": %w`, err)}
		}
	}
	if v, ok := sfuo.mutation.Month(); ok {
		if err := subjectfield.MonthValidator(v); err != nil {
			return &ValidationError{Name: "month", err: fmt.Errorf(`ent: validator failed for field "SubjectField.month": %w`, err)}
		}
	}
	if v, ok := sfuo.mutation.Date(); ok {
		if err := subjectfield.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`ent: validator failed for field "SubjectField.date": %w`, err)}
		}
	}
	if v, ok := sfuo.mutation.Weekday(); ok {
		if err := subjectfield.WeekdayValidator(v); err != nil {
			return &ValidationError{Name: "weekday", err: fmt.Errorf(`ent: validator failed for field "SubjectField.weekday": %w`, err)}
		}
	}
	return nil
}

func (sfuo *SubjectFieldUpdateOne) sqlSave(ctx context.Context) (_node *SubjectField, err error) {
	if err := sfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subjectfield.Table, subjectfield.Columns, sqlgraph.NewFieldSpec(subjectfield.FieldID, field.TypeInt))
	id, ok := sfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubjectField.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subjectfield.FieldID)
		for _, f := range fields {
			if !subjectfield.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subjectfield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfuo.mutation.Rate1(); ok {
		_spec.SetField(subjectfield.FieldRate1, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.AddedRate1(); ok {
		_spec.AddField(subjectfield.FieldRate1, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.Rate2(); ok {
		_spec.SetField(subjectfield.FieldRate2, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.AddedRate2(); ok {
		_spec.AddField(subjectfield.FieldRate2, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.Rate3(); ok {
		_spec.SetField(subjectfield.FieldRate3, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.AddedRate3(); ok {
		_spec.AddField(subjectfield.FieldRate3, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.Rate4(); ok {
		_spec.SetField(subjectfield.FieldRate4, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.AddedRate4(); ok {
		_spec.AddField(subjectfield.FieldRate4, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.Rate5(); ok {
		_spec.SetField(subjectfield.FieldRate5, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.AddedRate5(); ok {
		_spec.AddField(subjectfield.FieldRate5, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.Rate6(); ok {
		_spec.SetField(subjectfield.FieldRate6, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.AddedRate6(); ok {
		_spec.AddField(subjectfield.FieldRate6, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.Rate7(); ok {
		_spec.SetField(subjectfield.FieldRate7, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.AddedRate7(); ok {
		_spec.AddField(subjectfield.FieldRate7, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.Rate8(); ok {
		_spec.SetField(subjectfield.FieldRate8, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.AddedRate8(); ok {
		_spec.AddField(subjectfield.FieldRate8, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.Rate9(); ok {
		_spec.SetField(subjectfield.FieldRate9, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.AddedRate9(); ok {
		_spec.AddField(subjectfield.FieldRate9, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.Rate10(); ok {
		_spec.SetField(subjectfield.FieldRate10, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.AddedRate10(); ok {
		_spec.AddField(subjectfield.FieldRate10, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.AverageScore(); ok {
		_spec.SetField(subjectfield.FieldAverageScore, field.TypeFloat64, value)
	}
	if value, ok := sfuo.mutation.AddedAverageScore(); ok {
		_spec.AddField(subjectfield.FieldAverageScore, field.TypeFloat64, value)
	}
	if value, ok := sfuo.mutation.Rank(); ok {
		_spec.SetField(subjectfield.FieldRank, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.AddedRank(); ok {
		_spec.AddField(subjectfield.FieldRank, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.Year(); ok {
		_spec.SetField(subjectfield.FieldYear, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.AddedYear(); ok {
		_spec.AddField(subjectfield.FieldYear, field.TypeUint32, value)
	}
	if value, ok := sfuo.mutation.Month(); ok {
		_spec.SetField(subjectfield.FieldMonth, field.TypeUint8, value)
	}
	if value, ok := sfuo.mutation.AddedMonth(); ok {
		_spec.AddField(subjectfield.FieldMonth, field.TypeUint8, value)
	}
	if value, ok := sfuo.mutation.Date(); ok {
		_spec.SetField(subjectfield.FieldDate, field.TypeUint8, value)
	}
	if value, ok := sfuo.mutation.AddedDate(); ok {
		_spec.AddField(subjectfield.FieldDate, field.TypeUint8, value)
	}
	if value, ok := sfuo.mutation.Weekday(); ok {
		_spec.SetField(subjectfield.FieldWeekday, field.TypeUint8, value)
	}
	if value, ok := sfuo.mutation.AddedWeekday(); ok {
		_spec.AddField(subjectfield.FieldWeekday, field.TypeUint8, value)
	}
	if sfuo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subjectfield.SubjectTable,
			Columns: []string{subjectfield.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sfuo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subjectfield.SubjectTable,
			Columns: []string{subjectfield.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubjectField{config: sfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subjectfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sfuo.mutation.done = true
	return _node, nil
}
