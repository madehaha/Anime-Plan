// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/subject"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Subject is the model entity for the Subject schema.
type Subject struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// NameCn holds the value of the "name_cn" field.
	NameCn string `json:"name_cn,omitempty"`
	// Date holds the value of the "date" field.
	Date string `json:"date,omitempty"`
	// Episodes holds the value of the "episodes" field.
	Episodes uint8 `json:"episodes,omitempty"`
	// Wish holds the value of the "wish" field.
	Wish uint32 `json:"wish,omitempty"`
	// Doing holds the value of the "doing" field.
	Doing uint32 `json:"doing,omitempty"`
	// Watched holds the value of the "watched" field.
	Watched uint32 `json:"watched,omitempty"`
	// OnHold holds the value of the "on_hold" field.
	OnHold uint32 `json:"on_hold,omitempty"`
	// Dropped holds the value of the "dropped" field.
	Dropped uint32 `json:"dropped,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubjectQuery when eager-loading is set.
	Edges        SubjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubjectEdges holds the relations/edges for other nodes in the graph.
type SubjectEdges struct {
	// Collections holds the value of the collections edge.
	Collections []*Collection `json:"collections,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CollectionsOrErr returns the Collections value or an error if the edge
// was not loaded in eager-loading.
func (e SubjectEdges) CollectionsOrErr() ([]*Collection, error) {
	if e.loadedTypes[0] {
		return e.Collections, nil
	}
	return nil, &NotLoadedError{edge: "collections"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subject) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subject.FieldID, subject.FieldEpisodes, subject.FieldWish, subject.FieldDoing, subject.FieldWatched, subject.FieldOnHold, subject.FieldDropped:
			values[i] = new(sql.NullInt64)
		case subject.FieldImage, subject.FieldSummary, subject.FieldName, subject.FieldNameCn, subject.FieldDate:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subject fields.
func (s *Subject) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subject.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint32(value.Int64)
		case subject.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				s.Image = value.String
			}
		case subject.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				s.Summary = value.String
			}
		case subject.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case subject.FieldNameCn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_cn", values[i])
			} else if value.Valid {
				s.NameCn = value.String
			}
		case subject.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				s.Date = value.String
			}
		case subject.FieldEpisodes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field episodes", values[i])
			} else if value.Valid {
				s.Episodes = uint8(value.Int64)
			}
		case subject.FieldWish:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wish", values[i])
			} else if value.Valid {
				s.Wish = uint32(value.Int64)
			}
		case subject.FieldDoing:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field doing", values[i])
			} else if value.Valid {
				s.Doing = uint32(value.Int64)
			}
		case subject.FieldWatched:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field watched", values[i])
			} else if value.Valid {
				s.Watched = uint32(value.Int64)
			}
		case subject.FieldOnHold:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field on_hold", values[i])
			} else if value.Valid {
				s.OnHold = uint32(value.Int64)
			}
		case subject.FieldDropped:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dropped", values[i])
			} else if value.Valid {
				s.Dropped = uint32(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subject.
// This includes values selected through modifiers, order, etc.
func (s *Subject) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryCollections queries the "collections" edge of the Subject entity.
func (s *Subject) QueryCollections() *CollectionQuery {
	return NewSubjectClient(s.config).QueryCollections(s)
}

// Update returns a builder for updating this Subject.
// Note that you need to call Subject.Unwrap() before calling this method if this Subject
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subject) Update() *SubjectUpdateOne {
	return NewSubjectClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Subject entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subject) Unwrap() *Subject {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Subject is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subject) String() string {
	var builder strings.Builder
	builder.WriteString("Subject(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("image=")
	builder.WriteString(s.Image)
	builder.WriteString(", ")
	builder.WriteString("summary=")
	builder.WriteString(s.Summary)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("name_cn=")
	builder.WriteString(s.NameCn)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(s.Date)
	builder.WriteString(", ")
	builder.WriteString("episodes=")
	builder.WriteString(fmt.Sprintf("%v", s.Episodes))
	builder.WriteString(", ")
	builder.WriteString("wish=")
	builder.WriteString(fmt.Sprintf("%v", s.Wish))
	builder.WriteString(", ")
	builder.WriteString("doing=")
	builder.WriteString(fmt.Sprintf("%v", s.Doing))
	builder.WriteString(", ")
	builder.WriteString("watched=")
	builder.WriteString(fmt.Sprintf("%v", s.Watched))
	builder.WriteString(", ")
	builder.WriteString("on_hold=")
	builder.WriteString(fmt.Sprintf("%v", s.OnHold))
	builder.WriteString(", ")
	builder.WriteString("dropped=")
	builder.WriteString(fmt.Sprintf("%v", s.Dropped))
	builder.WriteByte(')')
	return builder.String()
}

// Subjects is a parsable slice of Subject.
type Subjects []*Subject
