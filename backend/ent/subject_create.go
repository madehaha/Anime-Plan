// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/subject"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubjectCreate is the builder for creating a Subject entity.
type SubjectCreate struct {
	config
	mutation *SubjectMutation
	hooks    []Hook
}

// SetImage sets the "image" field.
func (sc *SubjectCreate) SetImage(s string) *SubjectCreate {
	sc.mutation.SetImage(s)
	return sc
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (sc *SubjectCreate) SetNillableImage(s *string) *SubjectCreate {
	if s != nil {
		sc.SetImage(*s)
	}
	return sc
}

// SetSummary sets the "summary" field.
func (sc *SubjectCreate) SetSummary(s string) *SubjectCreate {
	sc.mutation.SetSummary(s)
	return sc
}

// SetName sets the "name" field.
func (sc *SubjectCreate) SetName(s string) *SubjectCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetDate sets the "date" field.
func (sc *SubjectCreate) SetDate(s string) *SubjectCreate {
	sc.mutation.SetDate(s)
	return sc
}

// SetNameCn sets the "name_cn" field.
func (sc *SubjectCreate) SetNameCn(s string) *SubjectCreate {
	sc.mutation.SetNameCn(s)
	return sc
}

// SetOnHold sets the "on_hold" field.
func (sc *SubjectCreate) SetOnHold(u uint32) *SubjectCreate {
	sc.mutation.SetOnHold(u)
	return sc
}

// SetNillableOnHold sets the "on_hold" field if the given value is not nil.
func (sc *SubjectCreate) SetNillableOnHold(u *uint32) *SubjectCreate {
	if u != nil {
		sc.SetOnHold(*u)
	}
	return sc
}

// SetWish sets the "wish" field.
func (sc *SubjectCreate) SetWish(u uint32) *SubjectCreate {
	sc.mutation.SetWish(u)
	return sc
}

// SetNillableWish sets the "wish" field if the given value is not nil.
func (sc *SubjectCreate) SetNillableWish(u *uint32) *SubjectCreate {
	if u != nil {
		sc.SetWish(*u)
	}
	return sc
}

// SetDoing sets the "doing" field.
func (sc *SubjectCreate) SetDoing(u uint32) *SubjectCreate {
	sc.mutation.SetDoing(u)
	return sc
}

// SetNillableDoing sets the "doing" field if the given value is not nil.
func (sc *SubjectCreate) SetNillableDoing(u *uint32) *SubjectCreate {
	if u != nil {
		sc.SetDoing(*u)
	}
	return sc
}

// SetSubjectType sets the "subject_type" field.
func (sc *SubjectCreate) SetSubjectType(u uint8) *SubjectCreate {
	sc.mutation.SetSubjectType(u)
	return sc
}

// SetNillableSubjectType sets the "subject_type" field if the given value is not nil.
func (sc *SubjectCreate) SetNillableSubjectType(u *uint8) *SubjectCreate {
	if u != nil {
		sc.SetSubjectType(*u)
	}
	return sc
}

// SetCollect sets the "collect" field.
func (sc *SubjectCreate) SetCollect(u uint32) *SubjectCreate {
	sc.mutation.SetCollect(u)
	return sc
}

// SetNillableCollect sets the "collect" field if the given value is not nil.
func (sc *SubjectCreate) SetNillableCollect(u *uint32) *SubjectCreate {
	if u != nil {
		sc.SetCollect(*u)
	}
	return sc
}

// SetDrop sets the "drop" field.
func (sc *SubjectCreate) SetDrop(u uint32) *SubjectCreate {
	sc.mutation.SetDrop(u)
	return sc
}

// SetNillableDrop sets the "drop" field if the given value is not nil.
func (sc *SubjectCreate) SetNillableDrop(u *uint32) *SubjectCreate {
	if u != nil {
		sc.SetDrop(*u)
	}
	return sc
}

// SetWatched sets the "watched" field.
func (sc *SubjectCreate) SetWatched(u uint32) *SubjectCreate {
	sc.mutation.SetWatched(u)
	return sc
}

// SetNillableWatched sets the "watched" field if the given value is not nil.
func (sc *SubjectCreate) SetNillableWatched(u *uint32) *SubjectCreate {
	if u != nil {
		sc.SetWatched(*u)
	}
	return sc
}

// Mutation returns the SubjectMutation object of the builder.
func (sc *SubjectCreate) Mutation() *SubjectMutation {
	return sc.mutation
}

// Save creates the Subject in the database.
func (sc *SubjectCreate) Save(ctx context.Context) (*Subject, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubjectCreate) SaveX(ctx context.Context) *Subject {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubjectCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubjectCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubjectCreate) defaults() {
	if _, ok := sc.mutation.Image(); !ok {
		v := subject.DefaultImage
		sc.mutation.SetImage(v)
	}
	if _, ok := sc.mutation.OnHold(); !ok {
		v := subject.DefaultOnHold
		sc.mutation.SetOnHold(v)
	}
	if _, ok := sc.mutation.Wish(); !ok {
		v := subject.DefaultWish
		sc.mutation.SetWish(v)
	}
	if _, ok := sc.mutation.Doing(); !ok {
		v := subject.DefaultDoing
		sc.mutation.SetDoing(v)
	}
	if _, ok := sc.mutation.SubjectType(); !ok {
		v := subject.DefaultSubjectType
		sc.mutation.SetSubjectType(v)
	}
	if _, ok := sc.mutation.Collect(); !ok {
		v := subject.DefaultCollect
		sc.mutation.SetCollect(v)
	}
	if _, ok := sc.mutation.Drop(); !ok {
		v := subject.DefaultDrop
		sc.mutation.SetDrop(v)
	}
	if _, ok := sc.mutation.Watched(); !ok {
		v := subject.DefaultWatched
		sc.mutation.SetWatched(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubjectCreate) check() error {
	if _, ok := sc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Subject.image"`)}
	}
	if v, ok := sc.mutation.Image(); ok {
		if err := subject.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Subject.image": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Summary(); !ok {
		return &ValidationError{Name: "summary", err: errors.New(`ent: missing required field "Subject.summary"`)}
	}
	if v, ok := sc.mutation.Summary(); ok {
		if err := subject.SummaryValidator(v); err != nil {
			return &ValidationError{Name: "summary", err: fmt.Errorf(`ent: validator failed for field "Subject.summary": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Subject.name"`)}
	}
	if _, ok := sc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Subject.date"`)}
	}
	if _, ok := sc.mutation.NameCn(); !ok {
		return &ValidationError{Name: "name_cn", err: errors.New(`ent: missing required field "Subject.name_cn"`)}
	}
	if _, ok := sc.mutation.OnHold(); !ok {
		return &ValidationError{Name: "on_hold", err: errors.New(`ent: missing required field "Subject.on_hold"`)}
	}
	if _, ok := sc.mutation.Wish(); !ok {
		return &ValidationError{Name: "wish", err: errors.New(`ent: missing required field "Subject.wish"`)}
	}
	if _, ok := sc.mutation.Doing(); !ok {
		return &ValidationError{Name: "doing", err: errors.New(`ent: missing required field "Subject.doing"`)}
	}
	if _, ok := sc.mutation.SubjectType(); !ok {
		return &ValidationError{Name: "subject_type", err: errors.New(`ent: missing required field "Subject.subject_type"`)}
	}
	if _, ok := sc.mutation.Collect(); !ok {
		return &ValidationError{Name: "collect", err: errors.New(`ent: missing required field "Subject.collect"`)}
	}
	if _, ok := sc.mutation.Drop(); !ok {
		return &ValidationError{Name: "drop", err: errors.New(`ent: missing required field "Subject.drop"`)}
	}
	if _, ok := sc.mutation.Watched(); !ok {
		return &ValidationError{Name: "watched", err: errors.New(`ent: missing required field "Subject.watched"`)}
	}
	return nil
}

func (sc *SubjectCreate) sqlSave(ctx context.Context) (*Subject, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubjectCreate) createSpec() (*Subject, *sqlgraph.CreateSpec) {
	var (
		_node = &Subject{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(subject.Table, sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Image(); ok {
		_spec.SetField(subject.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := sc.mutation.Summary(); ok {
		_spec.SetField(subject.FieldSummary, field.TypeString, value)
		_node.Summary = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(subject.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Date(); ok {
		_spec.SetField(subject.FieldDate, field.TypeString, value)
		_node.Date = value
	}
	if value, ok := sc.mutation.NameCn(); ok {
		_spec.SetField(subject.FieldNameCn, field.TypeString, value)
		_node.NameCn = value
	}
	if value, ok := sc.mutation.OnHold(); ok {
		_spec.SetField(subject.FieldOnHold, field.TypeUint32, value)
		_node.OnHold = value
	}
	if value, ok := sc.mutation.Wish(); ok {
		_spec.SetField(subject.FieldWish, field.TypeUint32, value)
		_node.Wish = value
	}
	if value, ok := sc.mutation.Doing(); ok {
		_spec.SetField(subject.FieldDoing, field.TypeUint32, value)
		_node.Doing = value
	}
	if value, ok := sc.mutation.SubjectType(); ok {
		_spec.SetField(subject.FieldSubjectType, field.TypeUint8, value)
		_node.SubjectType = value
	}
	if value, ok := sc.mutation.Collect(); ok {
		_spec.SetField(subject.FieldCollect, field.TypeUint32, value)
		_node.Collect = value
	}
	if value, ok := sc.mutation.Drop(); ok {
		_spec.SetField(subject.FieldDrop, field.TypeUint32, value)
		_node.Drop = value
	}
	if value, ok := sc.mutation.Watched(); ok {
		_spec.SetField(subject.FieldWatched, field.TypeUint32, value)
		_node.Watched = value
	}
	return _node, _spec
}

// SubjectCreateBulk is the builder for creating many Subject entities in bulk.
type SubjectCreateBulk struct {
	config
	builders []*SubjectCreate
}

// Save creates the Subject entities in the database.
func (scb *SubjectCreateBulk) Save(ctx context.Context) ([]*Subject, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subject, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubjectCreateBulk) SaveX(ctx context.Context) []*Subject {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubjectCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubjectCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
