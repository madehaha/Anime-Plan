// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/members"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MembersCreate is the builder for creating a Members entity.
type MembersCreate struct {
	config
	mutation *MembersMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (mc *MembersCreate) SetUsername(s string) *MembersCreate {
	mc.mutation.SetUsername(s)
	return mc
}

// SetEmail sets the "email" field.
func (mc *MembersCreate) SetEmail(s string) *MembersCreate {
	mc.mutation.SetEmail(s)
	return mc
}

// SetPassword sets the "password" field.
func (mc *MembersCreate) SetPassword(s string) *MembersCreate {
	mc.mutation.SetPassword(s)
	return mc
}

// SetNickname sets the "nickname" field.
func (mc *MembersCreate) SetNickname(s string) *MembersCreate {
	mc.mutation.SetNickname(s)
	return mc
}

// SetAvatar sets the "avatar" field.
func (mc *MembersCreate) SetAvatar(s string) *MembersCreate {
	mc.mutation.SetAvatar(s)
	return mc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (mc *MembersCreate) SetNillableAvatar(s *string) *MembersCreate {
	if s != nil {
		mc.SetAvatar(*s)
	}
	return mc
}

// SetGid sets the "gid" field.
func (mc *MembersCreate) SetGid(u uint8) *MembersCreate {
	mc.mutation.SetGid(u)
	return mc
}

// SetNillableGid sets the "gid" field if the given value is not nil.
func (mc *MembersCreate) SetNillableGid(u *uint8) *MembersCreate {
	if u != nil {
		mc.SetGid(*u)
	}
	return mc
}

// SetRegisterTime sets the "register_time" field.
func (mc *MembersCreate) SetRegisterTime(s string) *MembersCreate {
	mc.mutation.SetRegisterTime(s)
	return mc
}

// SetID sets the "id" field.
func (mc *MembersCreate) SetID(u uint32) *MembersCreate {
	mc.mutation.SetID(u)
	return mc
}

// Mutation returns the MembersMutation object of the builder.
func (mc *MembersCreate) Mutation() *MembersMutation {
	return mc.mutation
}

// Save creates the Members in the database.
func (mc *MembersCreate) Save(ctx context.Context) (*Members, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MembersCreate) SaveX(ctx context.Context) *Members {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MembersCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MembersCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MembersCreate) defaults() {
	if _, ok := mc.mutation.Avatar(); !ok {
		v := members.DefaultAvatar
		mc.mutation.SetAvatar(v)
	}
	if _, ok := mc.mutation.Gid(); !ok {
		v := members.DefaultGid
		mc.mutation.SetGid(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MembersCreate) check() error {
	if _, ok := mc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "Members.username"`)}
	}
	if v, ok := mc.mutation.Username(); ok {
		if err := members.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Members.username": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Members.email"`)}
	}
	if v, ok := mc.mutation.Email(); ok {
		if err := members.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Members.email": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Members.password"`)}
	}
	if _, ok := mc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "Members.nickname"`)}
	}
	if v, ok := mc.mutation.Nickname(); ok {
		if err := members.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "Members.nickname": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "Members.avatar"`)}
	}
	if v, ok := mc.mutation.Avatar(); ok {
		if err := members.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`ent: validator failed for field "Members.avatar": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Gid(); !ok {
		return &ValidationError{Name: "gid", err: errors.New(`ent: missing required field "Members.gid"`)}
	}
	if _, ok := mc.mutation.RegisterTime(); !ok {
		return &ValidationError{Name: "register_time", err: errors.New(`ent: missing required field "Members.register_time"`)}
	}
	return nil
}

func (mc *MembersCreate) sqlSave(ctx context.Context) (*Members, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MembersCreate) createSpec() (*Members, *sqlgraph.CreateSpec) {
	var (
		_node = &Members{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(members.Table, sqlgraph.NewFieldSpec(members.FieldID, field.TypeUint32))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Username(); ok {
		_spec.SetField(members.FieldUsername, field.TypeString, value)
		_node.Username = &value
	}
	if value, ok := mc.mutation.Email(); ok {
		_spec.SetField(members.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := mc.mutation.Password(); ok {
		_spec.SetField(members.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := mc.mutation.Nickname(); ok {
		_spec.SetField(members.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := mc.mutation.Avatar(); ok {
		_spec.SetField(members.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := mc.mutation.Gid(); ok {
		_spec.SetField(members.FieldGid, field.TypeUint8, value)
		_node.Gid = value
	}
	if value, ok := mc.mutation.RegisterTime(); ok {
		_spec.SetField(members.FieldRegisterTime, field.TypeString, value)
		_node.RegisterTime = value
	}
	return _node, _spec
}

// MembersCreateBulk is the builder for creating many Members entities in bulk.
type MembersCreateBulk struct {
	config
	builders []*MembersCreate
}

// Save creates the Members entities in the database.
func (mcb *MembersCreateBulk) Save(ctx context.Context) ([]*Members, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Members, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MembersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MembersCreateBulk) SaveX(ctx context.Context) []*Members {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MembersCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MembersCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
