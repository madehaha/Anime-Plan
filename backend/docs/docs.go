// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/:member_id/member/comment": {
            "get": {
                "description": "Get Comments By Uid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Collection"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "member_id",
                        "name": "member_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "comments",
                        "schema": {
                            "$ref": "#/definitions/response.CommentsResp"
                        }
                    }
                }
            }
        },
        "/:subject_id/subject/comment": {
            "get": {
                "description": "Get Comments By Id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Collection"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "subject_id",
                        "name": "subject_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "comments",
                        "schema": {
                            "$ref": "#/definitions/response.CommentsResp"
                        }
                    }
                }
            }
        },
        "/cancel": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Member"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/collection/:subject_id": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get Subject by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Collection"
                ],
                "parameters": [
                    {
                        "description": "collection",
                        "name": "collection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/collection.AddOrUpdateCollectionReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "UpdateCollection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Collection"
                ],
                "parameters": [
                    {
                        "description": "collection",
                        "name": "collection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/collection.AddOrUpdateCollectionReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Member"
                ],
                "parameters": [
                    {
                        "description": "login req",
                        "name": "loginReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UserLoginReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": " login success ",
                        "schema": {
                            "$ref": "#/definitions/response.UserLoginResp"
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get Me",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Member"
                ],
                "responses": {
                    "200": {
                        "description": "MemberInfo",
                        "schema": {
                            "$ref": "#/definitions/response.UserGetResp"
                        }
                    }
                }
            }
        },
        "/modify": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "ModifyInfo",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Member"
                ],
                "parameters": [
                    {
                        "description": "Modify Info",
                        "name": "ModifyReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.ModifyInfoReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Member"
                ],
                "parameters": [
                    {
                        "description": "register req",
                        "name": "registerReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UserRegisterReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": " register success "
                    }
                }
            }
        },
        "/subject/:subject_id": {
            "get": {
                "description": "Get Subject by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subject"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "subject_id",
                        "name": "subject_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SubjectInfo",
                        "schema": {
                            "$ref": "#/definitions/response.GetSubjectResp"
                        }
                    }
                }
            }
        },
        "/subject/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create Subject",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subject"
                ],
                "parameters": [
                    {
                        "description": "SubjectCreate",
                        "name": "SubjectReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/subject.CreateSubjectReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/subject/get": {
            "get": {
                "description": "Get All Subject",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subject"
                ],
                "responses": {
                    "200": {
                        "description": "SubjectsInfo",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response.GetSubjectResp"
                            }
                        }
                    }
                }
            }
        },
        "/user/:id/avatar": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get Avatar",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Member"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MemberAvatar",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "collection.AddOrUpdateCollectionReq": {
            "type": "object",
            "required": [
                "has_comment",
                "type"
            ],
            "properties": {
                "comment": {
                    "type": "string"
                },
                "ep_status": {
                    "type": "integer"
                },
                "has_comment": {
                    "type": "boolean"
                },
                "score": {
                    "type": "integer"
                },
                "type": {
                    "maximum": 5,
                    "minimum": 1,
                    "allOf": [
                        {
                            "$ref": "#/definitions/collection.CollectionType"
                        }
                    ]
                }
            }
        },
        "collection.CollectionType": {
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4,
                5
            ],
            "x-enum-varnames": [
                "Wish",
                "Watched",
                "Doing",
                "OnHold",
                "Dropped"
            ]
        },
        "response.CommentResp": {
            "type": "object",
            "properties": {
                "Comment": {
                    "type": "string"
                },
                "MemberID": {
                    "type": "integer"
                },
                "SubjectId": {
                    "type": "integer"
                },
                "Time": {
                    "type": "string"
                }
            }
        },
        "response.CommentsResp": {
            "type": "object",
            "properties": {
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.CommentResp"
                    }
                }
            }
        },
        "response.GetSubjectResp": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "doing": {
                    "type": "integer"
                },
                "dropped": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "name_cn": {
                    "type": "string"
                },
                "on_hold": {
                    "type": "integer"
                },
                "subject_type": {
                    "type": "integer"
                },
                "summary": {
                    "type": "string"
                },
                "watched": {
                    "type": "integer"
                },
                "wish": {
                    "type": "integer"
                }
            }
        },
        "response.UserGetResp": {
            "type": "object",
            "properties": {
                "avatar": {
                    "description": "Avatar holds the value of the \"avatar\" field.",
                    "type": "string"
                },
                "email": {
                    "description": "Email holds the value of the \"email\" field.",
                    "type": "string"
                },
                "gid": {
                    "description": "Gid holds the value of the \"gid\" field.",
                    "type": "integer"
                },
                "nickname": {
                    "description": "Nickname holds the value of the \"nickname\" field.",
                    "type": "string"
                },
                "register_time": {
                    "description": "RegisterTime holds the value of the \"register_time\" field.",
                    "type": "string"
                },
                "uid": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "username": {
                    "description": "Username holds the value of the \"username\" field.",
                    "type": "string"
                }
            }
        },
        "response.UserLoginResp": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "subject.CreateSubjectReq": {
            "type": "object",
            "required": [
                "date",
                "episodes",
                "month",
                "name",
                "name_cn",
                "summary",
                "weekDay",
                "year"
            ],
            "properties": {
                "date": {
                    "type": "integer",
                    "maximum": 31,
                    "minimum": 1
                },
                "episodes": {
                    "type": "integer"
                },
                "image": {
                    "description": "subject",
                    "type": "string"
                },
                "month": {
                    "type": "integer",
                    "maximum": 12,
                    "minimum": 1
                },
                "name": {
                    "type": "string"
                },
                "name_cn": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "weekDay": {
                    "type": "integer",
                    "maximum": 7,
                    "minimum": 1
                },
                "year": {
                    "description": "subject field",
                    "type": "integer"
                }
            }
        },
        "user.Info": {
            "type": "object",
            "required": [
                "email",
                "nickname",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Email holds the value of the \"email\" field.",
                    "type": "string"
                },
                "nickname": {
                    "description": "Nickname holds the value of the \"nickname\" field.",
                    "type": "string"
                },
                "password": {
                    "description": "Password holds the value of the \"password\" field.",
                    "type": "string"
                },
                "username": {
                    "description": "Username holds the value of the \"username\" field.",
                    "type": "string"
                }
            }
        },
        "user.ModifyInfoReq": {
            "type": "object",
            "required": [
                "info"
            ],
            "properties": {
                "info": {
                    "$ref": "#/definitions/user.Info"
                }
            }
        },
        "user.UserLoginReq": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "user.UserRegisterReq": {
            "type": "object",
            "required": [
                "email",
                "nickname",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server Petstore server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
